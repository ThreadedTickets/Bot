{"version":3,"file":"TranscriptManager.js","sources":["src/utils/tickets/TranscriptManager.ts"],"sourceRoot":"/","sourcesContent":["// Refactored TranscriptWriter\nimport fs from \"fs\";\nimport path from \"path\";\nimport {\n  Message,\n  EmbedBuilder,\n  User,\n  GuildMember,\n  APIEmbed,\n  PartialMessage,\n} from \"discord.js\";\nimport * as readline from \"readline\";\n\nfunction numberToWords(n: number): string {\n  const words = [\n    \"Zero\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n    \"Ten\",\n    \"Eleven\",\n    \"Twelve\",\n    \"Thirteen\",\n    \"Fourteen\",\n    \"Fifteen\",\n    \"Sixteen\",\n    \"Seventeen\",\n    \"Eighteen\",\n    \"Nineteen\",\n    \"Twenty\",\n  ];\n  return n <= 20 ? words[n] : `User ${n}`;\n}\n\nexport interface UserMetadata {\n  username: string;\n  roleColor?: string;\n  isBot: boolean;\n}\n\nexport interface SerializedMessage {\n  messageId: string;\n  userId: string;\n  type: number;\n  content: string;\n  embeds: APIEmbed[];\n  replyTo?: string;\n  edited: boolean;\n  timestamp: string;\n}\n\nexport interface MetaFile {\n  users: Record<string, UserMetadata>;\n  anonMap: Record<string, string>;\n  anonCounter: number;\n  metadata: Record<string, any>;\n}\n\nexport class TranscriptWriter {\n  private dir: string;\n  private filePath: string;\n  private metaPath: string;\n  private anonMap = new Map<string, string>();\n  private users: Record<string, UserMetadata> = {};\n  private anonCounter = 1;\n  private initialized = false;\n  private allowAnonymity: boolean;\n  private ticketId: string;\n  private metadata: Record<string, any> = {};\n  private closed = false;\n  private writers = new Map<\n    string,\n    { writer: TranscriptWriter; timeout: NodeJS.Timeout }\n  >();\n  private readonly CLEANUP_DELAY = 2 * 60 * 1000; // 2 minutes\n\n  get(ticketId: string, anonymise: boolean): TranscriptWriter {\n    const existing = this.writers.get(ticketId);\n\n    if (existing) {\n      clearTimeout(existing.timeout); // Reset cleanup timer\n      existing.timeout = this.scheduleCleanup(ticketId);\n      return existing.writer;\n    }\n\n    const writer = new TranscriptWriter(ticketId, anonymise);\n    const timeout = this.scheduleCleanup(ticketId);\n    this.writers.set(ticketId, { writer, timeout });\n\n    return writer;\n  }\n\n  private scheduleCleanup(ticketId: string): NodeJS.Timeout {\n    return setTimeout(() => {\n      const item = this.writers.get(ticketId);\n      if (!item) return;\n      try {\n        item.writer[\"closed\"] = true; // Soft close (no handles to close)\n      } catch (err) {\n        console.error(`Failed to close TranscriptWriter for ${ticketId}:`, err);\n      }\n      this.writers.delete(ticketId);\n    }, this.CLEANUP_DELAY);\n  }\n\n  delete(ticketId: string): void {\n    const entry = this.writers.get(ticketId);\n    if (entry) {\n      clearTimeout(entry.timeout);\n      this.writers.delete(ticketId);\n    }\n  }\n\n  clearAll(): void {\n    for (const [ticketId, { timeout }] of this.writers.entries()) {\n      clearTimeout(timeout);\n      this.writers.delete(ticketId);\n    }\n  }\n\n  constructor(ticketId: string, allowAnonymity = false) {\n    this.ticketId = ticketId;\n    this.allowAnonymity = allowAnonymity;\n    this.dir = path.resolve(\"./transcripts\");\n    this.filePath = path.join(this.dir, `${ticketId}.jsonl`);\n    this.metaPath = path.join(this.dir, `${ticketId}.meta.json`);\n    this.ticketId = ticketId;\n\n    if (!fs.existsSync(this.dir)) {\n      fs.mkdirSync(this.dir, { recursive: true });\n    }\n\n    this.loadMeta();\n  }\n\n  private loadMeta() {\n    if (fs.existsSync(this.metaPath)) {\n      const meta: MetaFile = JSON.parse(\n        fs.readFileSync(this.metaPath, \"utf-8\")\n      );\n      this.users = meta.users || {};\n      this.anonCounter = meta.anonCounter || 1;\n      this.metadata = meta.metadata || {};\n      for (const [realId, anonId] of Object.entries(meta.anonMap || {})) {\n        this.anonMap.set(realId, anonId);\n      }\n    }\n  }\n\n  private saveMeta() {\n    const meta: MetaFile = {\n      users: this.users,\n      anonCounter: this.anonCounter,\n      anonMap: Object.fromEntries(this.anonMap.entries()),\n      metadata: this.metadata,\n    };\n    fs.writeFileSync(this.metaPath, JSON.stringify(meta, null, 2));\n  }\n\n  private assignUserId(user: User): string {\n    if (!this.allowAnonymity) return user.id;\n    if (!this.anonMap.has(user.id)) {\n      const anonId = `anon-${this.anonCounter++}`;\n      this.anonMap.set(user.id, anonId);\n    }\n    return this.anonMap.get(user.id)!;\n  }\n\n  private captureUserMeta(user: User, member?: GuildMember): UserMetadata {\n    const anonId = this.assignUserId(user);\n    if (this.allowAnonymity) {\n      const anonIndex = parseInt(anonId.split(\"-\")[1], 10);\n      return {\n        username: `Anonymous ${numberToWords(anonIndex)}`,\n        isBot: user.bot,\n      };\n    }\n    return {\n      username: user.tag,\n      roleColor: member?.displayHexColor ?? undefined,\n      isBot: user.bot,\n    };\n  }\n\n  public deleteTranscript(): void {\n    if (this.closed) throw new Error(\"Transcript already closed or deleted.\");\n\n    if (fs.existsSync(this.filePath)) {\n      fs.unlinkSync(this.filePath);\n    }\n\n    if (fs.existsSync(this.metaPath)) {\n      fs.unlinkSync(this.metaPath);\n    }\n\n    this.closed = true;\n  }\n\n  public appendMessage(msg: Message): void {\n    const user = msg.author;\n    const userId = this.assignUserId(user);\n    if (!this.users[userId]) {\n      this.users[userId] = this.captureUserMeta(user, msg.member ?? undefined);\n      this.saveMeta();\n    }\n\n    const serialized: SerializedMessage = {\n      messageId: msg.id,\n      userId,\n      type: msg.type,\n      content: msg.content,\n      embeds: msg.embeds.map((e) => EmbedBuilder.from(e).toJSON()),\n      replyTo:\n        msg.reference?.messageId ?? [1, 2].includes(msg.type)\n          ? msg.mentions.users.first()?.id\n          : undefined,\n      edited: !!msg.editedTimestamp,\n      timestamp: msg.createdAt.toISOString(),\n    };\n\n    fs.appendFileSync(this.filePath, JSON.stringify(serialized) + \"\\n\");\n  }\n\n  public setMeta(path: string, value: any): void {\n    const parts = path.split(\".\");\n    let current = this.metadata;\n    for (let i = 0; i < parts.length - 1; i++) {\n      if (!current[parts[i]]) current[parts[i]] = {};\n      current = current[parts[i]];\n    }\n    current[parts[parts.length - 1]] = value;\n    this.saveMeta();\n  }\n\n  public getFilePath(): string {\n    return this.filePath;\n  }\n\n  public getMeta(): MetaFile {\n    return {\n      users: this.users,\n      anonCounter: this.anonCounter,\n      anonMap: Object.fromEntries(this.anonMap.entries()),\n      metadata: this.metadata,\n    };\n  }\n\n  public async editMessage(\n    messageId: string,\n    newMessage: Message | PartialMessage\n  ): Promise<void> {\n    if (this.closed) throw new Error(\"Cannot edit a closed transcript.\");\n\n    const serialized: SerializedMessage = {\n      messageId: newMessage.id,\n      userId: newMessage.author!.id,\n      type: newMessage.type ?? -1,\n      content: newMessage.content!,\n      embeds: newMessage.embeds.map((e) => EmbedBuilder.from(e).toJSON()),\n      replyTo: newMessage.reference?.messageId ?? undefined,\n      edited: !!newMessage.editedTimestamp,\n      timestamp: newMessage.createdAt.toISOString(),\n    };\n\n    const tempPath = this.filePath + \".tmp\";\n    const rl = readline.createInterface({\n      input: fs.createReadStream(this.filePath),\n      crlfDelay: Infinity,\n    });\n\n    const tempStream = fs.createWriteStream(tempPath);\n    let found = false;\n\n    for await (const line of rl) {\n      try {\n        const msg = JSON.parse(line) as SerializedMessage;\n\n        if (msg.messageId === newMessage.id) {\n          // Write the updated serialized message instead of the old one\n          tempStream.write(JSON.stringify(serialized) + \"\\n\");\n          found = true;\n        } else {\n          // Write the original line unchanged\n          tempStream.write(line + \"\\n\");\n        }\n      } catch {\n        // If a line is malformed, write it back as-is to keep file intact\n        tempStream.write(line + \"\\n\");\n      }\n    }\n\n    await new Promise((res) => tempStream.end(res));\n\n    if (!found) throw new Error(`Message ID ${newMessage.id} not found.`);\n\n    fs.renameSync(tempPath, this.filePath);\n  }\n}\nclass TranscriptWriterManager {\n  private writers = new Map<\n    string,\n    { writer: TranscriptWriter; timeout: NodeJS.Timeout }\n  >();\n  private readonly CLEANUP_DELAY = 2 * 60 * 1000; // 2 minutes\n\n  get(ticketId: string, anonymise: boolean): TranscriptWriter {\n    const existing = this.writers.get(ticketId);\n\n    if (existing) {\n      clearTimeout(existing.timeout); // Reset cleanup timer\n      existing.timeout = this.scheduleCleanup(ticketId);\n      return existing.writer;\n    }\n\n    const writer = new TranscriptWriter(ticketId, anonymise);\n    const timeout = this.scheduleCleanup(ticketId);\n    this.writers.set(ticketId, { writer, timeout });\n\n    return writer;\n  }\n\n  private scheduleCleanup(ticketId: string): NodeJS.Timeout {\n    return setTimeout(() => {\n      const item = this.writers.get(ticketId);\n      if (!item) return;\n      try {\n        item.writer[\"closed\"] = true; // Soft close (no handles to close)\n      } catch (err) {\n        console.error(`Failed to close TranscriptWriter for ${ticketId}:`, err);\n      }\n      this.writers.delete(ticketId);\n    }, this.CLEANUP_DELAY);\n  }\n\n  delete(ticketId: string): void {\n    const entry = this.writers.get(ticketId);\n    if (entry) {\n      clearTimeout(entry.timeout);\n      this.writers.delete(ticketId);\n    }\n  }\n\n  clearAll(): void {\n    for (const [ticketId, { timeout }] of this.writers.entries()) {\n      clearTimeout(timeout);\n      this.writers.delete(ticketId);\n    }\n  }\n}\nexport const transcriptWriterManager = new TranscriptWriterManager();\n"],"names":[],"mappings":"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","debug_id":"29517794-4ba1-5614-86af-b1cba511dee3"}