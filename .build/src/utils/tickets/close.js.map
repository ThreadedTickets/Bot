{"version":3,"file":"close.js","sources":["src/utils/tickets/close.ts"],"sourceRoot":"/","sourcesContent":["import {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonStyle,\n  ChatInputCommandInteraction,\n  Message,\n  ModalSubmitInteraction,\n  TextChannel,\n} from \"discord.js\";\nimport { client, TaskScheduler } from \"../..\";\nimport { formatDuration, parseDurationToMs } from \"../formatters/duration\";\nimport { t } from \"../../lang\";\nimport { Locale } from \"../../types/Locale\";\nimport { TicketSchema } from \"../../database/modals/Ticket\";\nimport {\n  getServer,\n  getServerGroupsByIds,\n  getServerMessage,\n} from \"../bot/getServer\";\nimport {\n  getAvailableLogChannel,\n  postLogToWebhook,\n} from \"../bot/sendLogToWebhook\";\nimport colours from \"../../constants/colours\";\nimport { fetchChannelById, fetchGuildById } from \"../bot/fetchMessage\";\nimport { TicketChannelManager } from \"../bot/TicketChannelManager\";\nimport { onError } from \"../onError\";\nimport { invalidateCache } from \"../database/invalidateCache\";\nimport { buildChannelPermissionOverwrites } from \"../hooks/events/tickets/new/main\";\nimport ticketOwnerPermissionsClosed from \"../../constants/ticketOwnerPermissionsClosed\";\nimport everyoneTicketPermissions from \"../../constants/everyoneTicketPermissions\";\nimport botTicketPermissions from \"../../constants/botTicketPermissions\";\nimport { updateMemberRoles } from \"../hooks/events/applications/end/roles\";\nimport { getGuildMember } from \"../bot/getGuildMember\";\nimport { TranscriptWriter } from \"./TranscriptManager\";\nimport { renderTranscriptFromJsonl } from \"./render\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport serverMessageToDiscordMessage from \"../formatters/serverMessageToDiscordMessage\";\nimport { resolveDiscordMessagePlaceholders } from \"../message/placeholders/resolvePlaceholders\";\nimport { generateBasePlaceholderContext } from \"../message/placeholders/generateBaseContext\";\nimport logger from \"../logger\";\n\nexport async function closeTicket(\n  ticketId: string,\n  locale: Locale,\n  reason?: string,\n  repliable?: ModalSubmitInteraction | ChatInputCommandInteraction | Message,\n  schedule?: string | null\n) {\n  const ticket = await TicketSchema.findOneAndUpdate(\n    { _id: ticketId },\n    {\n      status: \"Closed\",\n      deletedAt: new Date(),\n      closeReason: reason || \"No reason provided\",\n    },\n    {\n      new: false,\n    }\n  );\n  await invalidateCache(`ticket:${ticketId}`);\n  if (!ticket)\n    return \"editReply\" in repliable\n      ? repliable?.editReply(\n          (\n            await onError(new Error(\"Could not find ticket\"), {\n              ticketId: ticketId,\n            })\n          ).discordMsg\n        )\n      : repliable?.edit(\n          (\n            await onError(new Error(\"Could not find ticket\"), {\n              ticketId: ticketId,\n            })\n          ).discordMsg\n        );\n\n  if (ticket.status === \"Closed\" && repliable)\n    return \"editReply\" in repliable\n      ? repliable?.editReply(t(locale, \"SCHEDULE_TICKET_CLOSE_ALREADY\"))\n      : repliable?.edit(t(locale, \"SCHEDULE_TICKET_CLOSE_ALREADY\"));\n  if (repliable) {\n    const member = await getGuildMember(client, ticket.server, ticket.owner);\n\n    if (member)\n      updateMemberRoles(\n        client,\n        member,\n        ticket.addRolesOnClose,\n        ticket.removeRolesOnClose\n      );\n  }\n\n  const ticketChannel = await fetchChannelById(client, ticket.channel);\n  const server = await getServer(ticket.server);\n\n  if (schedule) {\n    const logChannel = getAvailableLogChannel(\n      server.settings.logging,\n      \"tickets.close\"\n    );\n    if (logChannel)\n      await postLogToWebhook(\n        client,\n        {\n          channel: logChannel.channel!,\n          enabled: logChannel.enabled,\n          webhook: logChannel.webhook!,\n        },\n        {\n          embeds: [\n            {\n              color: parseInt(colours.info, 16),\n              title: t(server.preferredLanguage, \"TICKET_CLOSE_LOG_TITLE\"),\n              description: t(\n                server.preferredLanguage,\n                `TICKET_CLOSE_LOG_BODY`,\n                {\n                  user: `<@${ticket.owner}>`,\n                  id: ticketId,\n                  reason: reason || \"No reason provided\",\n                }\n              ),\n            },\n          ],\n        }\n      );\n\n    if (!ticketChannel?.isThread()) {\n      await (ticketChannel as TextChannel)\n        .edit({\n          permissionOverwrites: buildChannelPermissionOverwrites(\n            await getServerGroupsByIds(ticket.groups, ticket.server),\n            ticket.server,\n            { id: ticket.owner, ...ticketOwnerPermissionsClosed },\n            everyoneTicketPermissions,\n            { id: client.user!.id, ...botTicketPermissions }\n          ),\n          ...(ticket.closeChannel ? { parent: ticket.closeChannel } : {}),\n        })\n        .catch((err) =>\n          logger.warn(`Failed to edit ticket channel on close`, err)\n        );\n    }\n    const ms = parseDurationToMs(schedule);\n    const formattedDuration = formatDuration(ms);\n    TaskScheduler.scheduleTask(\n      \"closeTicket\",\n      { ticketId, locale, reason },\n      ms,\n      `CLOSE-${ticketId}`\n    );\n    \"editReply\" in repliable\n      ? repliable?.editReply(\n          t(locale, \"SCHEDULE_TICKET_CLOSE\", { duration: formattedDuration })\n        )\n      : repliable?.edit(\n          t(locale, \"SCHEDULE_TICKET_CLOSE\", { duration: formattedDuration })\n        );\n\n    if (ticketChannel?.isTextBased())\n      (ticketChannel as TextChannel)\n        .send({\n          content: t(locale, \"TICKET_CLOSE_REOPEN_MESSAGE\", {\n            duration: formattedDuration,\n          }),\n          components: [\n            new ActionRowBuilder<ButtonBuilder>().setComponents(\n              new ButtonBuilder()\n                .setCustomId(`reopen:${ticketId}`)\n                .setStyle(ButtonStyle.Primary)\n                .setLabel(t(locale, \"TICKET_PIN_MESSAGE_COMPONENTS_REOPEN\"))\n                .setDisabled(!ticket.allowReopening)\n            ),\n          ],\n        })\n        .catch((err) =>\n          logger.warn(`Failed to send message to ticket channel on close`, err)\n        );\n    else if (ticketChannel?.isThread()) {\n      await ticketChannel.members\n        .remove(ticket.owner)\n        .catch((err) =>\n          logger.warn(`Failed to remove ticket owner on close`, err)\n        );\n    }\n    return;\n  }\n\n  if (ticket.takeTranscripts) {\n    const writer = new TranscriptWriter(ticketId);\n    writer.setMeta(\"name\", ticketId);\n    const html = await renderTranscriptFromJsonl(\n      writer.getFilePath(),\n      writer.getMeta().users,\n      writer.getMeta().metadata\n    );\n\n    const transcriptPath = path.join(\n      process.cwd(),\n      \"transcripts\",\n      `${ticket.isRaised ? \"LOCKED_\" : \"\"}${ticketId}.html`\n    );\n    fs.writeFileSync(transcriptPath, html);\n    writer.deleteTranscript();\n\n    const logChannel = getAvailableLogChannel(\n      server.settings.logging,\n      \"tickets.transcripts\"\n    );\n    if (logChannel)\n      await postLogToWebhook(\n        client,\n        {\n          channel: logChannel.channel!,\n          enabled: logChannel.enabled,\n          webhook: logChannel.webhook!,\n        },\n        {\n          embeds: [\n            {\n              color: parseInt(colours.info, 16),\n              title: t(\n                server.preferredLanguage,\n                \"TICKET_CLOSE_WITH_TRANSCRIPT_LOG_TITLE\"\n              ),\n              description: t(\n                server.preferredLanguage,\n                `TICKET_CLOSE_WITH_TRANSCRIPT_LOG_BODY`,\n                {\n                  user: `<@${ticket.owner}>`,\n                  id: ticketId,\n                  reason: reason || \"No reason provided\",\n                }\n              ),\n            },\n          ],\n          files: [transcriptPath],\n        }\n      );\n  }\n\n  await new TicketChannelManager().remove(ticket.channel);\n  invalidateCache(`tickets:${ticket.server}:${ticket.owner}:Open`);\n  invalidateCache(`tickets:${ticket.server}:Open`);\n\n  if (ticketChannel) {\n    await ticketChannel\n      .delete(\"Deleting old ticket channel\")\n      .catch((err) =>\n        logger.warn(`Failed to delete ticket channel on close`, err)\n      );\n  }\n\n  if (ticket.dmOnClose) {\n    const owner = await getGuildMember(client, ticket.server, ticket.owner);\n    const message = await getServerMessage(ticket.dmOnClose, ticket.server);\n    const guild = await fetchGuildById(client, ticket.server);\n    if (owner && message && guild) {\n      owner.send({\n        components: [\n          new ActionRowBuilder<ButtonBuilder>()\n            .addComponents(\n              new ButtonBuilder()\n                .setURL(process.env[\"DISCORD_APPLICATION_INVITE\"]!)\n                .setStyle(ButtonStyle.Link)\n                .setLabel(t(locale, \"TICKET_CLOSE_DM_BUTTON\"))\n            )\n            .toJSON(),\n        ],\n        ...resolveDiscordMessagePlaceholders(\n          serverMessageToDiscordMessage(message),\n          generateBasePlaceholderContext({\n            server: guild,\n          })\n        ),\n      });\n    }\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"8474ce6f-e20b-51dc-9858-ff6af5c46881"}