{"version":3,"file":"sendLogToWebhook.js","sources":["src/utils/bot/sendLogToWebhook.ts"],"sourceRoot":"/","sourcesContent":["import {\r\n  Client,\r\n  TextChannel,\r\n  WebhookClient,\r\n  ChannelType,\r\n  APIEmbed,\r\n} from \"discord.js\";\r\nimport { WebhookContent } from \"../../types/WebhookContent\";\r\nimport { getCachedDataElse } from \"../database/getCachedElse\";\r\nimport { toTimeUnit } from \"../formatters/toTimeUnit\";\r\nimport { GuildSchema } from \"../../database/modals/Guild\";\r\nimport { updateCachedData } from \"../database/updateCache\";\r\nimport {\r\n  LogChannel,\r\n  LoggingSettings,\r\n} from \"../../commands/interactions/slash/logging\";\r\nimport logger from \"../logger\";\r\n\r\nexport type LogConfig = {\r\n  enabled: boolean;\r\n  channel: string;\r\n  webhook: string;\r\n};\r\n\r\nconst createWebhook = async (channel: TextChannel, client: Client) => {\r\n  return await channel.createWebhook({\r\n    name: `${client.user?.username || \"Logger\"}`,\r\n    avatar: client.user?.displayAvatarURL(),\r\n  });\r\n};\r\n\r\n// Recursively update webhook URLs in the provided logging configuration\r\nconst updateWebhookInLoggingConfig = async (\r\n  config: any,\r\n  oldWebhookUrl: string,\r\n  newWebhookUrl: string\r\n) => {\r\n  for (const [key, value] of Object.entries(config)) {\r\n    if (typeof value === \"object\") {\r\n      await updateWebhookInLoggingConfig(value, oldWebhookUrl, newWebhookUrl);\r\n    } else if (key === \"webhook\" && value === oldWebhookUrl) {\r\n      config[key] = newWebhookUrl;\r\n    }\r\n  }\r\n};\r\n\r\nexport const postLogToWebhook = async (\r\n  client: Client,\r\n  logConfig: LogConfig,\r\n  content: WebhookContent\r\n) => {\r\n  if (!logConfig.enabled || !logConfig.channel) return;\r\n\r\n  let webhookClient: WebhookClient | null = null;\r\n\r\n  const guild = client.guilds.cache.find((g) =>\r\n    g.channels.cache.has(logConfig.channel)\r\n  );\r\n  if (!guild) return;\r\n\r\n  const channel = guild.channels.cache.get(logConfig.channel);\r\n  if (!channel || !channel.isTextBased()) {\r\n    await updateLoggingConfigToNull(guild.id, logConfig);\r\n    return;\r\n  }\r\n\r\n  // Prepare the webhook channel (either the thread's parent or the text channel)\r\n  let webhookChannel: TextChannel;\r\n  if (channel.isThread()) {\r\n    if (!channel.parent || !channel.parent.isTextBased()) return;\r\n    webhookChannel = channel.parent as TextChannel;\r\n  } else if (channel.type === ChannelType.GuildText) {\r\n    webhookChannel = channel;\r\n  } else {\r\n    return;\r\n  }\r\n\r\n  // If no webhook URL, create one before attempting to send\r\n  if (!logConfig.webhook) {\r\n    try {\r\n      const newWebhook = await createWebhook(webhookChannel, client);\r\n      logConfig.webhook = newWebhook.url;\r\n      webhookClient = new WebhookClient({ url: newWebhook.url });\r\n\r\n      const { data: document } = await getCachedDataElse(\r\n        `guilds:${guild.id}`,\r\n        toTimeUnit(\"seconds\", 0, 30),\r\n        async () =>\r\n          await GuildSchema.findOneAndUpdate(\r\n            { id: guild.id },\r\n            { $setOnInsert: { id: guild.id } },\r\n            { upsert: true, new: true }\r\n          ),\r\n        GuildSchema\r\n      );\r\n\r\n      await updateWebhookInLoggingConfig(\r\n        document.settings.logging,\r\n        \"\",\r\n        newWebhook.url\r\n      );\r\n      await document.save();\r\n\r\n      updateCachedData(\r\n        `guilds:${guild.id}`,\r\n        toTimeUnit(\"seconds\", 0, 30),\r\n        document.toObject()\r\n      );\r\n\r\n      logger.debug(`Created new webhook for guild ${guild.id} as none existed`);\r\n    } catch (err) {\r\n      logger.error(`Failed to create missing webhook`, err);\r\n      return;\r\n    }\r\n  } else {\r\n    webhookClient = new WebhookClient({ url: logConfig.webhook });\r\n  }\r\n\r\n  try {\r\n    await webhookClient.send(content);\r\n  } catch (error) {\r\n    logger.warn(`Initial webhook send failed, attempting recovery`, error);\r\n\r\n    try {\r\n      const newWebhook = await createWebhook(webhookChannel, client);\r\n      const oldWebhookUrl = logConfig.webhook;\r\n      logConfig.webhook = newWebhook.url;\r\n      webhookClient = new WebhookClient({ url: newWebhook.url });\r\n\r\n      const { data: document } = await getCachedDataElse(\r\n        `guilds:${guild.id}`,\r\n        toTimeUnit(\"seconds\", 0, 30),\r\n        async () =>\r\n          await GuildSchema.findOneAndUpdate(\r\n            { id: guild.id },\r\n            { $setOnInsert: { id: guild.id } },\r\n            { upsert: true, new: true }\r\n          ),\r\n        GuildSchema\r\n      );\r\n\r\n      await updateWebhookInLoggingConfig(\r\n        document.settings.logging,\r\n        oldWebhookUrl,\r\n        newWebhook.url\r\n      );\r\n\r\n      await document.save();\r\n\r\n      updateCachedData(\r\n        `guilds:${guild.id}`,\r\n        toTimeUnit(\"seconds\", 0, 30),\r\n        document.toObject()\r\n      );\r\n\r\n      logger.debug(`Recovered webhook for guild ${guild.id}`);\r\n\r\n      await webhookClient.send({\r\n        ...content,\r\n        embeds: [...(content.embeds as APIEmbed[])],\r\n      });\r\n    } catch (err) {\r\n      logger.error(`Failed to recreate deleted webhook`, err);\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to disable logging and set webhook and channel to null\r\nconst updateLoggingConfigToNull = async (\r\n  guildId: string,\r\n  logConfig: LogConfig\r\n) => {\r\n  try {\r\n    const document = await GuildSchema.findOne({ id: guildId });\r\n\r\n    if (!document) {\r\n      logger.error(`Guild ${guildId} not found.`);\r\n      return;\r\n    }\r\n\r\n    // Disable logging and set the channel and webhook to null\r\n    for (const category in document.settings.logging) {\r\n      for (const subCategory in (document.settings.logging as any)[\r\n        category as string\r\n      ]) {\r\n        const setting = (document.settings.logging as any)[category][\r\n          subCategory\r\n        ];\r\n        if (setting.webhook === logConfig.webhook) {\r\n          setting.webhook = null;\r\n          setting.channel = null;\r\n          setting.enabled = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Save the updated document\r\n    await document.save();\r\n\r\n    // Update cache\r\n    updateCachedData(\r\n      `guilds:${guildId}`,\r\n      toTimeUnit(\"seconds\", 0, 30),\r\n      document.toObject()\r\n    );\r\n\r\n    logger.debug(\r\n      `Logging has been disabled for guild ${guildId} and the webhook/channel set to null.`\r\n    );\r\n  } catch (err) {\r\n    logger.error(`Failed to update logging config for guild ${guildId}`, err);\r\n  }\r\n};\r\n\r\ntype LoggingEvent =\r\n  | \"general\"\r\n  | \"tickets.feedback\"\r\n  | \"tickets.open\"\r\n  | \"tickets.close\"\r\n  | \"tickets.lock\"\r\n  | \"tickets.unlock\"\r\n  | \"tickets.raise\"\r\n  | \"tickets.lower\"\r\n  | \"tickets.move\"\r\n  | \"tickets.transcripts\"\r\n  | \"applications.create\"\r\n  | \"applications.approve\"\r\n  | \"applications.reject\"\r\n  | \"applications.delete\";\r\n\r\n/**\r\n *\r\n * @param logConfig\r\n * @param event\r\n * @returns A function that will return the log config for a channel based on the given log event\r\n */\r\nexport function getAvailableLogChannel(\r\n  logConfig: LoggingSettings,\r\n  event: LoggingEvent | (string & {})\r\n): LogChannel | null {\r\n  const parts = event.split(\".\");\r\n\r\n  let current: any = logConfig;\r\n  for (const part of parts) {\r\n    if (current && typeof current === \"object\" && part in current) {\r\n      current = current[part];\r\n    } else {\r\n      current = null;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (\r\n    current &&\r\n    typeof current === \"object\" &&\r\n    \"enabled\" in current &&\r\n    current.enabled\r\n  ) {\r\n    return current as LogChannel;\r\n  }\r\n\r\n  if (logConfig.general && logConfig.general.enabled && current.enabled) {\r\n    return logConfig.general;\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"c554d73b-809e-5c58-8d66-7d38351359cb"}