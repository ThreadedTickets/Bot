{"version":3,"file":"TicketChannelManager.js","sources":["src/utils/bot/TicketChannelManager.ts"],"sourceRoot":"/","sourcesContent":["import redis from \"../redis\";\n\nexport class TicketChannelManager {\n  private key = \"tickets:channels\"; // Redis set key for storing all ticket channel IDs\n  private prefix = \"tickets:channel:\"; // Prefix for channel-specific keys\n  private redis;\n\n  constructor() {\n    this.redis = redis;\n  }\n\n  /**\n   * Adds a ticket channel to Redis.\n   */\n  async add(\n    channelId: string,\n    ticketId: string,\n    takeTranscript: boolean,\n    anonymise: boolean,\n    allowAutoresponders: boolean,\n    owner: string\n  ): Promise<void> {\n    await this.redis.sadd(this.key, channelId);\n    await this.redis.set(\n      `${this.prefix}${channelId}`,\n      JSON.stringify({\n        ticketId,\n        takeTranscript,\n        anonymise,\n        allowAutoresponders,\n        owner,\n      })\n    );\n  }\n\n  /**\n   * Removes a ticket channel from Redis.\n   */\n  async remove(channelId: string): Promise<void> {\n    await this.redis.srem(this.key, channelId);\n    await this.redis.del(`${this.prefix}${channelId}`);\n  }\n\n  /**\n   * Checks if a channel is a managed ticket channel.\n   */\n  async isTicketChannel(channelId: string): Promise<boolean> {\n    return (await this.redis.sismember(this.key, channelId)) === 1;\n  }\n\n  /**\n   * Returns the ticket ID for a given channel ID, or null if not found.\n   */\n  async getTicketId(channelId: string): Promise<string | null> {\n    const data = await this.redis.get(`${this.prefix}${channelId}`);\n    return data ? JSON.parse(data).ticketId : null;\n  }\n\n  async getTicket(channelId: string): Promise<{\n    ticketId: string;\n    takeTranscript: boolean;\n    anonymise: boolean;\n    allowAutoresponders: boolean;\n    owner: string;\n  } | null> {\n    const data = await this.redis.get(`${this.prefix}${channelId}`);\n    return data ? JSON.parse(data) : null;\n  }\n\n  /**\n   * Gets all channel IDs currently tracked.\n   */\n  async getAllChannels(): Promise<string[]> {\n    return await this.redis.smembers(this.key);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,qDAA6B;AAE7B,MAAa,oBAAoB;IAK/B;QAJQ,QAAG,GAAG,kBAAkB,CAAC,CAAC,mDAAmD;QAC7E,WAAM,GAAG,kBAAkB,CAAC,CAAC,mCAAmC;QAItE,IAAI,CAAC,KAAK,GAAG,eAAK,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,GAAG,CACP,SAAiB,EACjB,QAAgB,EAChB,cAAuB,EACvB,SAAkB,EAClB,mBAA4B,EAC5B,KAAa;QAEb,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAC3C,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAClB,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,EAC5B,IAAI,CAAC,SAAS,CAAC;YACb,QAAQ;YACR,cAAc;YACd,SAAS;YACT,mBAAmB;YACnB,KAAK;SACN,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,SAAiB;QAC5B,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAC3C,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,SAAiB;QACjC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,SAAiB;QAO/B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;CACF;AAzED,oDAyEC","debug_id":"24cceb43-e74d-5d2f-8d99-1dfd4ca16f8f"}