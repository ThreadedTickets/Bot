{"version":3,"file":"InMemoryCache.js","sources":["src/utils/database/InMemoryCache.ts"],"sourceRoot":"/","sourcesContent":["type CacheEntry<V> = {\n  value: V;\n  expiresAt?: number;\n  createdAt: number;\n};\n\ninterface InMemoryCacheOptions {\n  /**\n   * The default time to live for items in ms\n   */\n  defaultTTL?: number;\n  /**\n   * How often to run the cleanup function in ms\n   */\n  cleanupInterval?: number;\n  groupLimits?: Record<string, number>; // e.g., { \"A:\": 10 }\n}\n\nexport class InMemoryCache<K extends string, V> {\n  private store = new Map<K, CacheEntry<V>>();\n  private options: InMemoryCacheOptions;\n  private cleanupTimer?: NodeJS.Timeout;\n\n  constructor(options: InMemoryCacheOptions = {}) {\n    this.options = options;\n\n    if (options.cleanupInterval) {\n      this.cleanupTimer = setInterval(\n        () => this.cleanup(),\n        options.cleanupInterval\n      );\n    }\n  }\n\n  /** Add or update a value in the cache */\n  set(key: K, value: V, ttlMs?: number) {\n    const now = Date.now();\n\n    // Handle group limits (e.g. keys starting with A:)\n    for (const prefix in this.options.groupLimits ?? {}) {\n      if (key.startsWith(prefix)) {\n        this.enforceGroupLimit(prefix, this.options.groupLimits![prefix]);\n        break;\n      }\n    }\n\n    const expiresAt =\n      ttlMs ?? this.options.defaultTTL\n        ? now + (ttlMs ?? this.options.defaultTTL!)\n        : undefined;\n\n    this.store.set(key, { value, expiresAt, createdAt: now });\n  }\n\n  /** Get an item if it's not expired */\n  get(key: K): V | undefined {\n    const entry = this.store.get(key);\n    if (!entry) return;\n\n    if (entry.expiresAt && entry.expiresAt < Date.now()) {\n      this.store.delete(key);\n      return;\n    }\n\n    return entry.value;\n  }\n\n  /** Check if an item exists and is not expired */\n  has(key: K): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Manually invalidate a key */\n  invalidate(key: K) {\n    this.store.delete(key);\n  }\n\n  /** Clear all keys */\n  clear() {\n    this.store.clear();\n  }\n\n  /** Return number of non-expired items */\n  size(): number {\n    this.cleanup();\n    return this.store.size;\n  }\n\n  /** Clean up expired entries */\n  private cleanup() {\n    const now = Date.now();\n    for (const [key, entry] of this.store) {\n      if (entry.expiresAt && entry.expiresAt < now) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  /** Enforce prefix group limit (FIFO eviction of oldest) */\n  private enforceGroupLimit(prefix: string, limit: number) {\n    const matching = [...this.store.entries()]\n      .filter(([key]) => key.startsWith(prefix))\n      .sort((a, b) => a[1].createdAt - b[1].createdAt); // oldest first\n\n    while (matching.length >= limit) {\n      const [oldestKey] = matching.shift()!;\n      this.store.delete(oldestKey);\n    }\n  }\n\n  /** Stop cleanup timer if needed */\n  dispose() {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"78c332db-b4cd-5d57-85ae-811395c8717d"}