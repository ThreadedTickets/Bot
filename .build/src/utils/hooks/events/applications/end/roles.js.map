{"version":3,"file":"roles.js","sources":["src/utils/hooks/events/applications/end/roles.ts"],"sourceRoot":"/","sourcesContent":["import { Client, GuildMember } from \"discord.js\";\nimport { registerHook } from \"../../..\";\nimport {\n  Application,\n  ApplicationQuestion,\n} from \"../../../../../types/Application\";\nimport { getGuildMember } from \"../../../../bot/getGuildMember\";\nimport logger from \"../../../../logger\";\n\nregisterHook(\n  \"ApplicationEnd\",\n  async ({\n    application,\n    responses,\n    owner,\n    client,\n  }: {\n    application: Application;\n    responses: {\n      applicationId: string;\n      startTime: Date;\n      server: string;\n      questionNumber: number;\n      questions: ApplicationQuestion[];\n\n      responses: { question: string; response: string }[];\n    };\n    owner: string;\n    client: Client;\n  }) => {\n    const { addRolesWhenPending, removeRolesWhenPending } = application;\n    const member = await getGuildMember(client, responses.server, owner);\n    if (!member) return;\n\n    await updateMemberRoles(\n      client,\n      member,\n      addRolesWhenPending ?? [],\n      removeRolesWhenPending ?? []\n    );\n  }\n);\n\nexport async function updateMemberRoles(\n  client: Client,\n  member: GuildMember,\n  rolesToAdd: string[],\n  rolesToRemove: string[]\n) {\n  const guild = member.guild;\n  const me = guild.members.me ?? (await guild.members.fetchMe());\n  const botHighestRole = me.roles.highest;\n\n  const canManage = (roleId: string) => {\n    const role = guild.roles.cache.get(roleId);\n    return role && botHighestRole.position > role.position && !role.managed;\n  };\n\n  const baseRoleIds = new Set<string>();\n  for (const [roleId, role] of member.roles.cache) {\n    if (roleId !== guild.id) {\n      baseRoleIds.add(roleId);\n    }\n  }\n\n  for (const roleId of rolesToAdd) {\n    if (canManage(roleId)) baseRoleIds.add(roleId);\n  }\n\n  for (const roleId of rolesToRemove) {\n    if (canManage(roleId)) baseRoleIds.delete(roleId);\n  }\n\n  const finalRoles = [...baseRoleIds];\n\n  try {\n    await member.roles.set(finalRoles);\n  } catch (err) {\n    logger.warn(`Failed to update roles from application`, err);\n  }\n}\n"],"names":[],"mappings":";;;;;;;AA2CA,8CAqCC;AA/ED,gCAAwC;AAKxC,mEAAgE;AAChE,gEAAwC;AAExC,IAAA,gBAAY,EACV,gBAAgB,EAChB,KAAK,EAAE,EACL,WAAW,EACX,SAAS,EACT,KAAK,EACL,MAAM,GAcP,EAAE,EAAE;IACH,MAAM,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,GAAG,WAAW,CAAC;IACpE,MAAM,MAAM,GAAG,MAAM,IAAA,+BAAc,EAAC,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACrE,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,MAAM,iBAAiB,CACrB,MAAM,EACN,MAAM,EACN,mBAAmB,IAAI,EAAE,EACzB,sBAAsB,IAAI,EAAE,CAC7B,CAAC;AACJ,CAAC,CACF,CAAC;AAEK,KAAK,UAAU,iBAAiB,CACrC,MAAc,EACd,MAAmB,EACnB,UAAoB,EACpB,aAAuB;IAEvB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC3B,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IAC/D,MAAM,cAAc,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;IAExC,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,EAAE;QACnC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3C,OAAO,IAAI,IAAI,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;IAC1E,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;IACtC,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAChD,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE,EAAE,CAAC;YACxB,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE,CAAC;QAChC,IAAI,SAAS,CAAC,MAAM,CAAC;YAAE,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE,CAAC;QACnC,IAAI,SAAS,CAAC,MAAM,CAAC;YAAE,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAEpC,IAAI,CAAC;QACH,MAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,gBAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC","debug_id":"0d77fa70-b0cf-5f6e-b8c1-69c3667bde4c"}