{"version":3,"file":"sendToSubmissionChannel.js","sources":["src/utils/hooks/events/applications/end/sendToSubmissionChannel.ts"],"sourceRoot":"/","sourcesContent":["import {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonStyle,\n  Client,\n} from \"discord.js\";\nimport { registerHook } from \"../../..\";\nimport {\n  Application,\n  ApplicationQuestion,\n} from \"../../../../../types/Application\";\nimport { getServer } from \"../../../../bot/getServer\";\nimport colours from \"../../../../../constants/colours\";\nimport { sendMessageToChannel } from \"../../../../bot/sendMessageToChannel\";\nimport { t } from \"../../../../../lang\";\nimport { formatDuration } from \"../../../../formatters/duration\";\nimport { CompletedApplicationSchema } from \"../../../../../database/modals/CompletedApplications\";\nimport logger from \"../../../../logger\";\ntype QA = { question: string; response: string };\n\nconst EMBED_TOTAL_CHAR_LIMIT = 6000;\nconst FIELD_NAME_LIMIT = 256;\nconst FIELD_VALUE_LIMIT = 1024;\nconst EMBEDS_PER_MESSAGE = 10;\n\nexport function buildQAMessages(pairs: QA[]) {\n  const messages: { embeds: any[] }[] = [];\n  let currentMessage: { embeds: any[] } = { embeds: [] };\n  let currentEmbed = createNewEmbed();\n  let totalEmbedChars = 0;\n\n  for (const { question, response } of pairs) {\n    let remainingResponse = response || \"None\";\n    let fieldName = truncate(question, FIELD_NAME_LIMIT);\n    let chunkIndex = 0;\n\n    while (remainingResponse.length > 0) {\n      // Get a chunk of response that fits within the field value limit\n      let chunk = remainingResponse.slice(0, FIELD_VALUE_LIMIT);\n      remainingResponse = remainingResponse.slice(FIELD_VALUE_LIMIT);\n\n      // If this is a continued chunk, update the field name\n      const name =\n        chunkIndex === 0\n          ? fieldName\n          : truncate(`${fieldName} (continued)`, FIELD_NAME_LIMIT);\n      chunkIndex++;\n\n      // Check if adding this field exceeds embed limits\n      const fieldCharCount = name.length + chunk.length;\n      if (\n        currentEmbed.fields.length >= 25 ||\n        totalEmbedChars + fieldCharCount > EMBED_TOTAL_CHAR_LIMIT\n      ) {\n        // Save current embed to message\n        currentMessage.embeds.push(currentEmbed);\n\n        // If current message has max embeds, push it and start a new one\n        if (currentMessage.embeds.length >= EMBEDS_PER_MESSAGE) {\n          messages.push(currentMessage);\n          currentMessage = { embeds: [] };\n        }\n\n        currentEmbed = createNewEmbed();\n        totalEmbedChars = 0;\n      }\n\n      // Add the field to the current embed\n      currentEmbed.fields.push({ name, value: chunk });\n      totalEmbedChars += fieldCharCount;\n    }\n  }\n\n  // Push any remaining data\n  if (currentEmbed.fields.length > 0) {\n    currentMessage.embeds.push(currentEmbed);\n  }\n  if (currentMessage.embeds.length > 0) {\n    messages.push(currentMessage);\n  }\n\n  return messages;\n}\n\nfunction createNewEmbed() {\n  return {\n    fields: [] as { name: string; value: string }[],\n    color: parseInt(colours.primary, 16),\n  };\n}\n\nfunction truncate(str: string, max: number): string {\n  return str.length > max ? str.slice(0, max - 3) + \"...\" : str;\n}\n\nregisterHook(\n  \"ApplicationFinal\",\n  async ({\n    client,\n    application,\n    responses,\n    owner,\n    id,\n  }: {\n    client: Client;\n    application: Application;\n    responses: {\n      applicationId: string;\n      startTime: Date;\n      server: string;\n      questionNumber: number;\n      questions: ApplicationQuestion[];\n\n      responses: { question: string; response: string }[];\n    };\n    owner: string;\n    id: string;\n  }) => {\n    const submissionChannel = application.submissionsChannel;\n    if (!submissionChannel) return;\n\n    const server = await getServer(application.server);\n\n    const message = await sendMessageToChannel(\n      client,\n      application.server,\n      submissionChannel,\n      {\n        content:\n          application.pingRoles.map((r) => `<@&${r}>`).join(\", \") || undefined,\n        embeds: [\n          {\n            title: t(server.preferredLanguage, \"NEW_APPLICATION_SUBMIT_TITLE\", {\n              application: application.name,\n            }),\n            color: parseInt(colours.success, 16),\n            description: `> ${t(\n              server.preferredLanguage,\n              \"NEW_APPLICATION_SUBMIT_BODY_OWNER\",\n              { user: `<@${owner}> (\\`${owner}\\`)` }\n            )}\\n> ${t(\n              server.preferredLanguage,\n              \"NEW_APPLICATION_SUBMIT_BODY_DURATION\",\n              {\n                duration: formatDuration(\n                  new Date().getTime() - new Date(responses.startTime).getTime()\n                ),\n              }\n            )}\\n> ${t(\n              server.preferredLanguage,\n              \"NEW_APPLICATION_SUBMIT_BODY_INFORMATION\"\n            )}`,\n          },\n        ],\n        components: [\n          new ActionRowBuilder<ButtonBuilder>().addComponents(\n            new ButtonBuilder()\n              .setCustomId(`accApp:${id}:${owner}`)\n              .setLabel(\"Accept\")\n              .setStyle(ButtonStyle.Success),\n            new ButtonBuilder()\n              .setCustomId(`rejApp:${id}:${owner}`)\n              .setLabel(\"Reject\")\n              .setStyle(ButtonStyle.Danger),\n            new ButtonBuilder()\n              .setCustomId(`delApp:${id}:${owner}`)\n              .setLabel(\"Delete\")\n              .setStyle(ButtonStyle.Danger),\n            new ButtonBuilder()\n              .setCustomId(\n                `ticket:${application.linkedTicketTrigger}:${id}:${owner}`\n              )\n              .setLabel(\"Create Ticket\")\n              .setStyle(ButtonStyle.Primary)\n              .setDisabled(application.linkedTicketTrigger ? false : true),\n            new ButtonBuilder()\n              .setCustomId(`appHistory:${application._id}:${owner}`)\n              .setLabel(\"View History\")\n              .setStyle(ButtonStyle.Primary)\n          ),\n        ],\n      }\n    );\n\n    if (!message)\n      return logger.warn(\n        \"Failed to send application submission message after completed application\"\n      );\n\n    const thread = await message.startThread({\n      name: `Application - ${application.name} - ${owner}`.slice(0, 100),\n      reason: \"Creating thread on submission message for staff discussion\",\n    });\n\n    // Just gives me a message link in the DB that i can work with\n    await CompletedApplicationSchema.findOneAndUpdate(\n      { _id: id },\n      { messageLink: message.url }\n    );\n\n    if (!thread) return;\n    const QAMessages = buildQAMessages(responses.responses);\n    for (const message of QAMessages) {\n      thread\n        .send(message)\n        .catch((err) =>\n          logger.warn(\"Failed to send QA message to application thread\", err)\n        );\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;;;AAyBA,0CAyDC;AAlFD,2CAKoB;AACpB,gCAAwC;AAKxC,yDAAsD;AACtD,+EAAuD;AACvD,+EAA4E;AAC5E,8CAAwC;AACxC,8DAAiE;AACjE,gGAAkG;AAClG,gEAAwC;AAGxC,MAAM,sBAAsB,GAAG,IAAI,CAAC;AACpC,MAAM,gBAAgB,GAAG,GAAG,CAAC;AAC7B,MAAM,iBAAiB,GAAG,IAAI,CAAC;AAC/B,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAE9B,SAAgB,eAAe,CAAC,KAAW;IACzC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IACzC,IAAI,cAAc,GAAsB,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;IACvD,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;IACpC,IAAI,eAAe,GAAG,CAAC,CAAC;IAExB,KAAK,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,KAAK,EAAE,CAAC;QAC3C,IAAI,iBAAiB,GAAG,QAAQ,IAAI,MAAM,CAAC;QAC3C,IAAI,SAAS,GAAG,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QACrD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,OAAO,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,iEAAiE;YACjE,IAAI,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC1D,iBAAiB,GAAG,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAE/D,sDAAsD;YACtD,MAAM,IAAI,GACR,UAAU,KAAK,CAAC;gBACd,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,QAAQ,CAAC,GAAG,SAAS,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAC7D,UAAU,EAAE,CAAC;YAEb,kDAAkD;YAClD,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAClD,IACE,YAAY,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE;gBAChC,eAAe,GAAG,cAAc,GAAG,sBAAsB,EACzD,CAAC;gBACD,gCAAgC;gBAChC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAEzC,iEAAiE;gBACjE,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,kBAAkB,EAAE,CAAC;oBACvD,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC9B,cAAc,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;gBAClC,CAAC;gBAED,YAAY,GAAG,cAAc,EAAE,CAAC;gBAChC,eAAe,GAAG,CAAC,CAAC;YACtB,CAAC;YAED,qCAAqC;YACrC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;YACjD,eAAe,IAAI,cAAc,CAAC;QACpC,CAAC;IACH,CAAC;IAED,0BAA0B;IAC1B,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACnC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;IACD,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACrC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,cAAc;IACrB,OAAO;QACL,MAAM,EAAE,EAAuC;QAC/C,KAAK,EAAE,QAAQ,CAAC,iBAAO,CAAC,OAAO,EAAE,EAAE,CAAC;KACrC,CAAC;AACJ,CAAC;AAED,SAAS,QAAQ,CAAC,GAAW,EAAE,GAAW;IACxC,OAAO,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;AAChE,CAAC;AAED,IAAA,gBAAY,EACV,kBAAkB,EAClB,KAAK,EAAE,EACL,MAAM,EACN,WAAW,EACX,SAAS,EACT,KAAK,EACL,EAAE,GAeH,EAAE,EAAE;IACH,MAAM,iBAAiB,GAAG,WAAW,CAAC,kBAAkB,CAAC;IACzD,IAAI,CAAC,iBAAiB;QAAE,OAAO;IAE/B,MAAM,MAAM,GAAG,MAAM,IAAA,qBAAS,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAEnD,MAAM,OAAO,GAAG,MAAM,IAAA,2CAAoB,EACxC,MAAM,EACN,WAAW,CAAC,MAAM,EAClB,iBAAiB,EACjB;QACE,OAAO,EACL,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS;QACtE,MAAM,EAAE;YACN;gBACE,KAAK,EAAE,IAAA,QAAC,EAAC,MAAM,CAAC,iBAAiB,EAAE,8BAA8B,EAAE;oBACjE,WAAW,EAAE,WAAW,CAAC,IAAI;iBAC9B,CAAC;gBACF,KAAK,EAAE,QAAQ,CAAC,iBAAO,CAAC,OAAO,EAAE,EAAE,CAAC;gBACpC,WAAW,EAAE,KAAK,IAAA,QAAC,EACjB,MAAM,CAAC,iBAAiB,EACxB,mCAAmC,EACnC,EAAE,IAAI,EAAE,KAAK,KAAK,QAAQ,KAAK,KAAK,EAAE,CACvC,OAAO,IAAA,QAAC,EACP,MAAM,CAAC,iBAAiB,EACxB,sCAAsC,EACtC;oBACE,QAAQ,EAAE,IAAA,yBAAc,EACtB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAC/D;iBACF,CACF,OAAO,IAAA,QAAC,EACP,MAAM,CAAC,iBAAiB,EACxB,yCAAyC,CAC1C,EAAE;aACJ;SACF;QACD,UAAU,EAAE;YACV,IAAI,6BAAgB,EAAiB,CAAC,aAAa,CACjD,IAAI,0BAAa,EAAE;iBAChB,WAAW,CAAC,UAAU,EAAE,IAAI,KAAK,EAAE,CAAC;iBACpC,QAAQ,CAAC,QAAQ,CAAC;iBAClB,QAAQ,CAAC,wBAAW,CAAC,OAAO,CAAC,EAChC,IAAI,0BAAa,EAAE;iBAChB,WAAW,CAAC,UAAU,EAAE,IAAI,KAAK,EAAE,CAAC;iBACpC,QAAQ,CAAC,QAAQ,CAAC;iBAClB,QAAQ,CAAC,wBAAW,CAAC,MAAM,CAAC,EAC/B,IAAI,0BAAa,EAAE;iBAChB,WAAW,CAAC,UAAU,EAAE,IAAI,KAAK,EAAE,CAAC;iBACpC,QAAQ,CAAC,QAAQ,CAAC;iBAClB,QAAQ,CAAC,wBAAW,CAAC,MAAM,CAAC,EAC/B,IAAI,0BAAa,EAAE;iBAChB,WAAW,CACV,UAAU,WAAW,CAAC,mBAAmB,IAAI,EAAE,IAAI,KAAK,EAAE,CAC3D;iBACA,QAAQ,CAAC,eAAe,CAAC;iBACzB,QAAQ,CAAC,wBAAW,CAAC,OAAO,CAAC;iBAC7B,WAAW,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAC9D,IAAI,0BAAa,EAAE;iBAChB,WAAW,CAAC,cAAc,WAAW,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;iBACrD,QAAQ,CAAC,cAAc,CAAC;iBACxB,QAAQ,CAAC,wBAAW,CAAC,OAAO,CAAC,CACjC;SACF;KACF,CACF,CAAC;IAEF,IAAI,CAAC,OAAO;QACV,OAAO,gBAAM,CAAC,IAAI,CAChB,2EAA2E,CAC5E,CAAC;IAEJ,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,EAAE,iBAAiB,WAAW,CAAC,IAAI,MAAM,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;QAClE,MAAM,EAAE,4DAA4D;KACrE,CAAC,CAAC;IAEH,8DAA8D;IAC9D,MAAM,kDAA0B,CAAC,gBAAgB,CAC/C,EAAE,GAAG,EAAE,EAAE,EAAE,EACX,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,EAAE,CAC7B,CAAC;IAEF,IAAI,CAAC,MAAM;QAAE,OAAO;IACpB,MAAM,UAAU,GAAG,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACxD,KAAK,MAAM,OAAO,IAAI,UAAU,EAAE,CAAC;QACjC,MAAM;aACH,IAAI,CAAC,OAAO,CAAC;aACb,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CACb,gBAAM,CAAC,IAAI,CAAC,iDAAiD,EAAE,GAAG,CAAC,CACpE,CAAC;IACN,CAAC;AACH,CAAC,CACF,CAAC","debug_id":"5774d300-1a42-58df-9b47-353dfd13fd42"}