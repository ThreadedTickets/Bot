{"version":3,"file":"apiServer.js","sources":["src/apiServer.ts"],"sourceRoot":"/","sourcesContent":["import express, { NextFunction, Request, Response } from \"express\";\r\nimport rateLimit from \"express-rate-limit\";\r\nimport { MessageCreatorSchema } from \"./database/modals/MessageCreator\";\r\nimport { validateDiscordMessage } from \"./utils/bot/validateMessage\";\r\nimport {\r\n  getServerApplication,\r\n  getServerApplications,\r\n  getServerGroup,\r\n  getServerGroups,\r\n  getServerMessage,\r\n  getServerMessages,\r\n  getServerTicketTrigger,\r\n} from \"./utils/bot/getServer\";\r\nimport { invalidateCache } from \"./utils/database/invalidateCache\";\r\nimport limits from \"./constants/limits\";\r\nimport { generateId } from \"./utils/database/generateId\";\r\nimport { GroupCreatorSchema } from \"./database/modals/GroupCreator\";\r\nimport {\r\n  GroupSchema,\r\n  GroupSchemaValidator,\r\n  GuildSchema,\r\n  MessageSchema,\r\n} from \"./database/modals/Guild\";\r\nimport {\r\n  ApplicationSchemaValidator,\r\n  ApplicationTriggerSchema,\r\n  TicketTriggerSchema,\r\n  TicketTriggerSchemaValidator,\r\n} from \"./database/modals/Panel\";\r\nimport { ApplicationCreatorSchema } from \"./database/modals/ApplicationCreator\";\r\nimport { TicketTriggerCreatorSchema } from \"./database/modals/TicketTriggerCreator\";\r\nimport { client } from \".\";\r\nimport os from \"os\";\r\nimport { getInfo } from \"discord-hybrid-sharding\";\r\nimport { formatDuration } from \"./utils/formatters/duration\";\r\nimport { updateCachedData } from \"./utils/database/updateCache\";\r\nimport { TagSchema } from \"./database/modals/Tag\";\r\nimport logger from \"./utils/logger\";\r\n\r\nfunction authMiddleware(req: Request, res: Response, next: NextFunction) {\r\n  const authHeader = req.headers[\"authorization\"];\r\n  const token = authHeader?.split(\" \")[1];\r\n\r\n  if (!token || token !== process.env[\"API_TOKEN\"]) {\r\n    res.status(401).json({ error: \"Unauthorized\" });\r\n    return;\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nconst app = express();\r\n\r\n// Auth middleware\r\napp.use(authMiddleware);\r\napp.use(express.json());\r\n\r\n// Rate limiter middleware for Prometheus endpoint\r\nconst limiter = rateLimit({\r\n  windowMs: 60 * 1000, // 1 minute\r\n  max: 10_000, // 5 requests per minute per IP\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n});\r\n\r\ntype Body = {\r\n  _id?: string;\r\n  server?: string;\r\n  [key: string]: any;\r\n};\r\n\r\n// Exportable function to start the metrics server\r\nexport function startApi(port: number) {\r\n  app.get(`/`, limiter, async (req: Request, res: Response) => {\r\n    res.json({\r\n      message: `Welcome to the Threaded API! The time for me is ${new Date().toISOString()}`,\r\n    });\r\n  });\r\n\r\n  app.post(\"/create/message/save\", async (req: Request, res: Response) => {\r\n    const creatorId = req.query.id;\r\n    const { content, embeds, attachments, components } = req.body as Body;\r\n\r\n    if (!creatorId) {\r\n      res.status(400).json({\r\n        message: \"Please provide a creatorId ID (?id=) and data in the body\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const creator = await MessageCreatorSchema.findById(creatorId);\r\n      if (!creator) throw new Error(\"Invalid editor - Error 0002\");\r\n      if (!creator.name)\r\n        throw new Error(\"Creator name is required to save the message\");\r\n      if (!creator.guildId)\r\n        throw new Error(\"Creator guildId is required to save the message\");\r\n\r\n      // Perform message checks\r\n      const validation = validateDiscordMessage({\r\n        content,\r\n        embeds,\r\n        attachments,\r\n        components,\r\n      });\r\n      if (validation.length)\r\n        throw new Error(\r\n          `Errors found when saving message: ${validation\r\n            .map((e) => e.message)\r\n            .join(\", \")}`\r\n        );\r\n\r\n      const messages = await getServerMessages(creator.guildId);\r\n      if (messages.length > limits.free.messages.amount)\r\n        throw new Error(`Too many messages: 0003`);\r\n\r\n      const id = creator.metadata.link || generateId(\"GM\");\r\n      if (!creator.metadata.link) {\r\n        // Create new message\r\n        const message = {\r\n          _id: id,\r\n          content,\r\n          embeds,\r\n          attachments,\r\n          components,\r\n          server: creator.guildId,\r\n          name: creator.name,\r\n        };\r\n\r\n        await MessageSchema.create(message);\r\n      } else {\r\n        const message = await getServerMessage(\r\n          creator.metadata.link,\r\n          creator.guildId\r\n        );\r\n        if (!message) {\r\n          throw new Error(\"Message to update not found: 0001\");\r\n        }\r\n\r\n        message.content = content;\r\n        message.embeds = embeds;\r\n        message.attachments = attachments;\r\n        message.components = components;\r\n        message.name = creator.name;\r\n\r\n        await message.save();\r\n        await invalidateCache(`message:${creator.metadata.link}`);\r\n      }\r\n\r\n      await MessageCreatorSchema.findByIdAndDelete(creatorId);\r\n      await invalidateCache(`messageCreators:${creatorId}`);\r\n      await invalidateCache(`messages:${creator.guildId}`);\r\n      res.status(200).json({ message: \"Message saved successfully\" });\r\n    } catch (error: any) {\r\n      res\r\n        .status(500)\r\n        .json({ message: `Error when saving message: ${error.message}` });\r\n    }\r\n  });\r\n\r\n  app.post(\"/create/group/save\", async (req: Request, res: Response) => {\r\n    const creatorId = req.query.id;\r\n    const { name, roles, extraMembers, permissions } = req.body as Body;\r\n\r\n    if (!creatorId) {\r\n      res.status(400).json({\r\n        message: \"Please provide a creatorId ID (?id=) and data in the body\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const creator = await GroupCreatorSchema.findById(creatorId);\r\n      if (!creator) throw new Error(\"Invalid editor - Error 0002\");\r\n      if (!creator.guildId)\r\n        throw new Error(\"Creator guildId is required to save the message\");\r\n\r\n      if (\r\n        !GroupSchemaValidator({\r\n          name,\r\n          roles,\r\n          permissions,\r\n          extraMembers,\r\n        })\r\n      )\r\n        throw new Error(`Modified document: 0004`);\r\n\r\n      const groups = await getServerGroups(creator.guildId);\r\n      if (groups.length > limits.free.groups.amount)\r\n        throw new Error(`Too many groups: 0003`);\r\n\r\n      const id = creator.metadata.link || generateId(\"GG\");\r\n      if (!creator.metadata.link) {\r\n        // Create new group\r\n        const group = {\r\n          _id: id,\r\n          name,\r\n          roles,\r\n          permissions,\r\n          extraMembers,\r\n          server: creator.guildId,\r\n        };\r\n\r\n        await GroupSchema.create(group);\r\n      } else {\r\n        const group = await getServerGroup(\r\n          creator.metadata.link,\r\n          creator.guildId\r\n        );\r\n        if (!group) {\r\n          throw new Error(\"Group to update not found: 0001\");\r\n        }\r\n\r\n        group.name = name;\r\n        group.extraMembers = extraMembers;\r\n        group.roles = roles;\r\n        group.permissions = permissions;\r\n        await group.save();\r\n        await invalidateCache(`group:${creator.metadata.link}`);\r\n      }\r\n\r\n      await GroupCreatorSchema.findByIdAndDelete(creatorId);\r\n      await invalidateCache(`groupCreators:${creatorId}`);\r\n      await invalidateCache(`groups:${creator.guildId}`);\r\n      res.status(200).json({ message: \"Group saved successfully\" });\r\n    } catch (error: any) {\r\n      res\r\n        .status(500)\r\n        .json({ message: `Error when saving group: ${error.message}` });\r\n    }\r\n  });\r\n\r\n  app.post(\"/create/application/save\", async (req: Request, res: Response) => {\r\n    const creatorId = req.query.id;\r\n\r\n    if (!creatorId) {\r\n      res.status(400).json({\r\n        message: \"Please provide a creatorId ID (?id=) and data in the body\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const creator = await ApplicationCreatorSchema.findById(creatorId);\r\n      if (!creator) throw new Error(\"Invalid editor - Error 0002\");\r\n      if (!creator.guildId)\r\n        throw new Error(\"Creator guildId is required to save the message\");\r\n\r\n      if (!ApplicationSchemaValidator(req.body))\r\n        throw new Error(`Modified document: 0004`);\r\n\r\n      const applications = await getServerApplications(creator.guildId);\r\n      if (applications.length > limits.free.applications.amount)\r\n        throw new Error(`Too many applications: 0003`);\r\n\r\n      const id = creator.metadata.link || generateId(\"AT\");\r\n      if (!creator.metadata.link) {\r\n        // Create new application\r\n        const application = {\r\n          _id: id,\r\n          server: creator.guildId,\r\n          ...(req.body as Body),\r\n        };\r\n\r\n        await ApplicationTriggerSchema.create(application);\r\n      } else {\r\n        let application = await getServerApplication(\r\n          creator.metadata.link,\r\n          creator.guildId\r\n        );\r\n        if (!application) {\r\n          throw new Error(\"Application to update not found: 0001\");\r\n        }\r\n\r\n        const { _id, server, ...safeBody } = req.body as Body;\r\n\r\n        // Apply safe updates\r\n        application.set(safeBody);\r\n        await application.save();\r\n        await invalidateCache(`application:${creator.metadata.link}`);\r\n      }\r\n\r\n      await ApplicationCreatorSchema.findByIdAndDelete(creatorId);\r\n      await invalidateCache(`applicationCreators:${creatorId}`);\r\n      await invalidateCache(`applications:${creator.guildId}`);\r\n      res.status(200).json({ message: \"Application saved successfully\" });\r\n    } catch (error: any) {\r\n      res\r\n        .status(500)\r\n        .json({ message: `Error when saving application: ${error.message}` });\r\n    }\r\n  });\r\n\r\n  app.post(\"/create/ticket/save\", async (req: Request, res: Response) => {\r\n    const creatorId = req.query.id;\r\n\r\n    if (!creatorId) {\r\n      res.status(400).json({\r\n        message: \"Please provide a creatorId ID (?id=) and data in the body\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const creator = await TicketTriggerCreatorSchema.findById(creatorId);\r\n      if (!creator) throw new Error(\"Invalid editor - Error 0002\");\r\n      if (!creator.guildId)\r\n        throw new Error(\"Creator guildId is required to save the message\");\r\n\r\n      if (!TicketTriggerSchemaValidator(req.body))\r\n        throw new Error(`Modified document: 0004`);\r\n\r\n      const triggers = await getServerApplications(creator.guildId);\r\n      if (triggers.length > limits.free.ticketTriggers.amount)\r\n        throw new Error(`Too many ticket triggers: 0003`);\r\n\r\n      const id = creator.metadata.link || generateId(\"TT\");\r\n      if (!creator.metadata.link) {\r\n        // Create new application\r\n        const trigger = {\r\n          _id: id,\r\n          server: creator.guildId,\r\n          ...(req.body as Body),\r\n        };\r\n\r\n        await TicketTriggerSchema.create(trigger);\r\n      } else {\r\n        let trigger = await getServerTicketTrigger(\r\n          creator.metadata.link,\r\n          creator.guildId\r\n        );\r\n        if (!trigger) {\r\n          throw new Error(\"Trigger to update not found: 0001\");\r\n        }\r\n\r\n        const { _id, server, ...safeBody } = req.body as Body;\r\n\r\n        // Apply safe updates\r\n        trigger.set(safeBody);\r\n        await trigger.save();\r\n        await invalidateCache(`ticketTrigger:${creator.metadata.link}`);\r\n      }\r\n\r\n      await TicketTriggerCreatorSchema.findByIdAndDelete(creatorId);\r\n      await invalidateCache(`ticketTriggerCreators:${creatorId}`);\r\n      await invalidateCache(`ticketTriggers:${creator.guildId}`);\r\n      await invalidateCache(`ticketTrigger:${id}`);\r\n      res.status(200).json({ message: \"Ticket trigger saved successfully\" });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        message: `Error when saving ticket trigger: ${error.message}`,\r\n      });\r\n    }\r\n  });\r\n\r\n  app.post(\"/forceCache\", async (req: Request, res: Response) => {\r\n    try {\r\n      const { type, _id } = req.body as Body;\r\n      if (!_id || !type) {\r\n        res.status(400).json({ message: \"Not all fields were provided\" });\r\n        return;\r\n      }\r\n      switch (type) {\r\n        case \"server\":\r\n          const server = await GuildSchema.findOne({ _id: _id });\r\n          if (!server) {\r\n            res.status(400).json({ message: \"That server doesn't exist\" });\r\n            return;\r\n          }\r\n          await updateCachedData(`guilds:${_id}`, 30, server);\r\n          res.status(200).json({\r\n            message: `Server has been added to the cache. It can be accessed through guilds:${_id}`,\r\n            key: `guilds:${_id}`,\r\n          });\r\n          break;\r\n        case \"message\":\r\n          const msg = await MessageSchema.findOne({ _id: _id });\r\n          if (!msg) {\r\n            res.status(400).json({ message: \"That message doesn't exist\" });\r\n            return;\r\n          }\r\n          await updateCachedData(`message:${_id}`, 30, msg);\r\n          res.status(200).json({\r\n            message: `Message has been added to the cache. It can be accessed through message:${_id}`,\r\n            key: `message:${_id}`,\r\n          });\r\n          break;\r\n        // In this case _id is of the server we want the messages of\r\n        case \"messages\":\r\n          const msgs = await MessageSchema.find({ server: _id });\r\n          await updateCachedData(\r\n            `messages:${_id}`,\r\n            30,\r\n            msgs.map((m) => {\r\n              return {\r\n                _id: m._id,\r\n                name: m.name,\r\n              };\r\n            })\r\n          );\r\n          res.status(200).json({\r\n            message: `Messages have been added to the cache. It can be accessed through messages:${_id}`,\r\n            key: `messages:${_id}`,\r\n          });\r\n          break;\r\n        case \"tag\":\r\n          const tag = await TagSchema.findOne({ _id: _id });\r\n          if (!tag) {\r\n            res.status(400).json({ message: \"That tag doesn't exist\" });\r\n            return;\r\n          }\r\n          await updateCachedData(`tag:${_id}`, 30, tag);\r\n          res.status(200).json({\r\n            message: `Tag has been added to the cache. It can be accessed through tag:${_id}`,\r\n            key: `tag:${_id}`,\r\n          });\r\n          break;\r\n        // In this case _id is of the server we want the messages of\r\n        case \"tags\":\r\n          const tags = await TagSchema.find({ server: _id });\r\n          await updateCachedData(`tags:${_id}`, 30, tags);\r\n          res.status(200).json({\r\n            message: `Tags have been added to the cache. It can be accessed through tags:${_id}`,\r\n            key: `tags:${_id}`,\r\n          });\r\n          break;\r\n        case \"interactive\":\r\n          const interactive = [\r\n            ...(await TagSchema.find({ server: _id })).map((t) => ({\r\n              _id: t._id,\r\n              name: t.name,\r\n            })),\r\n            ...(await ApplicationTriggerSchema.find({ server: _id })).map(\r\n              (t) => ({ _id: t._id, name: t.name })\r\n            ),\r\n            ...(await TicketTriggerSchema.find({ server: _id })).map((t) => ({\r\n              _id: t._id,\r\n              name: t.label,\r\n            })),\r\n          ];\r\n          await updateCachedData(`interactive:${_id}`, 30, interactive);\r\n          res.status(200).json({\r\n            message: `Interactive components have been added to the cache. It can be accessed through interactive:${_id}`,\r\n            key: `interactive:${_id}`,\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        message: `Error when caching: ${error.message}`,\r\n      });\r\n    }\r\n  });\r\n\r\n  app.get(\"/api/health\", async (req, res) => {\r\n    const uptime = process.uptime();\r\n    const memoryUsageMB = process.memoryUsage().rss / 1024 / 1024;\r\n\r\n    // Get CPU usage over 100ms\r\n    const cpuUsageStart = process.cpuUsage();\r\n    const timeStart = Date.now();\r\n    await new Promise((r) => setTimeout(r, 100));\r\n    const cpuUsageEnd = process.cpuUsage(cpuUsageStart);\r\n    const elapsedMs = Date.now() - timeStart;\r\n    const cpuPercent =\r\n      ((cpuUsageEnd.user + cpuUsageEnd.system) /\r\n        1000 /\r\n        elapsedMs /\r\n        os.cpus().length) *\r\n      100;\r\n\r\n    // Guild count across all shards this cluster handles\r\n    const guildCount = client.guilds.cache.size;\r\n\r\n    res.json({\r\n      clusterId: getInfo().CLUSTER,\r\n      shardIds: getInfo().SHARD_LIST,\r\n      uptime: formatDuration(uptime * 1000),\r\n      guildCount,\r\n      ramUsage: memoryUsageMB,\r\n      cpuUsage: cpuPercent,\r\n    });\r\n  });\r\n\r\n  app.listen(port, () => {\r\n    logger.info(`API server running at http://localhost:${port}`);\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"d95956dc-0ca8-5f0b-9091-353bd073a204"}