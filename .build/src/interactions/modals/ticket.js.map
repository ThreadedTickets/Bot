{"version":3,"file":"ticket.js","sources":["src/interactions/modals/ticket.ts"],"sourceRoot":"/","sourcesContent":["import { GuildMember, MessageFlags, ModalSubmitInteraction } from \"discord.js\";\nimport { t } from \"../../lang\";\nimport { ModalHandler } from \"../../types/Interactions\";\nimport {\n  TicketForm,\n  TicketFormResponse,\n  TicketTrigger,\n} from \"../../types/Ticket\";\nimport { getServerTicketTrigger } from \"../../utils/bot/getServer\";\nimport { onError } from \"../../utils/onError\";\nimport {\n  canCreateTicketTarget,\n  performTicketChecks,\n} from \"../../utils/tickets/performChecks\";\nimport { runHooks } from \"../../utils/hooks\";\nimport { ticketQueueManager } from \"../..\";\n\nconst modal: ModalHandler = {\n  customId: \"ticket\",\n  async execute(client, data, interaction) {\n    if (!interaction.guildId) return;\n    const [, triggerId] = interaction.customId.split(\":\");\n\n    const trigger = await getServerTicketTrigger(\n      triggerId,\n      interaction.guildId\n    );\n    if (!trigger)\n      return interaction.reply(\n        (await onError(new Error(\"Trigger not found\"))).discordMsg\n      );\n\n    const triggerObject = trigger.toObject();\n    const triggerTyped: TicketTrigger = {\n      ...triggerObject,\n    };\n\n    await interaction.reply({\n      content: t(data.lang!, \"TICKET_CREATE_PERFORMING_CHECKS\"),\n      flags: [MessageFlags.Ephemeral],\n    });\n\n    const responses = parseTicketFormModalResponse(\n      interaction,\n      triggerTyped.form\n    );\n\n    ticketQueueManager.wrap(async () => {\n      const checks = await performTicketChecks(\n        triggerTyped,\n        interaction.member as GuildMember\n      );\n\n      if (!checks.allowed) {\n        return interaction.editReply(\n          (\n            await onError(\n              new Error(t(data.lang!, `ERROR_CODE_${checks.error}`))\n            )\n          ).discordMsg\n        );\n      }\n\n      const checkTargetChannel = await canCreateTicketTarget(\n        interaction.guild!,\n        trigger.isThread ? \"thread\" : \"channel\",\n        trigger.openChannel || interaction.channelId\n      );\n      if (!checkTargetChannel.allowed)\n        return interaction.editReply(\n          (\n            await onError(\n              new Error(t(data.lang!, `ERROR_CODE_${checkTargetChannel.error}`))\n            )\n          ).discordMsg\n        );\n\n      await interaction.editReply({\n        content: t(data.lang!, \"TICKET_CREATE_CHECKS_PASSED\"),\n      });\n\n      await runHooks(\"TicketCreate\", {\n        client: client,\n        guild: interaction.guild!,\n        lang: data.lang!,\n        messageOrInteraction: interaction,\n        owner: interaction.user.id,\n        responses: responses,\n        trigger: triggerTyped,\n        user: interaction.user,\n      });\n    }, interaction.guildId);\n  },\n};\n\nexport default modal;\n\nexport function parseTicketFormModalResponse(\n  interaction: ModalSubmitInteraction,\n  form: TicketForm[]\n): TicketFormResponse[] {\n  const responses: TicketFormResponse[] = [];\n\n  for (let i = 0; i < form.length; i++) {\n    const question = form[i].question;\n    const customId = `form_${i}`;\n\n    const value = interaction.fields.getTextInputValue(customId);\n    responses.push({\n      question,\n      response: value,\n    });\n  }\n\n  return responses;\n}\n"],"names":[],"mappings":"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","debug_id":"85bbcc6e-726e-507f-b0d2-096d2964da87"}