{"version":3,"file":"rejectApplication.js","sources":["src/interactions/modals/rejectApplication.ts"],"sourceRoot":"/","sourcesContent":["import { Guild } from \"discord.js\";\r\nimport colours from \"../../constants/colours\";\r\nimport { CompletedApplicationSchema } from \"../../database/modals/CompletedApplications\";\r\nimport { t } from \"../../lang\";\r\nimport { ModalHandler } from \"../../types/Interactions\";\r\nimport { getGuildMember } from \"../../utils/bot/getGuildMember\";\r\nimport {\r\n  getCompletedApplication,\r\n  getServer,\r\n  getServerApplication,\r\n  getServerMessage,\r\n} from \"../../utils/bot/getServer\";\r\nimport { sendDirectMessage } from \"../../utils/bot/sendDirectMessage\";\r\nimport {\r\n  getAvailableLogChannel,\r\n  postLogToWebhook,\r\n} from \"../../utils/bot/sendLogToWebhook\";\r\nimport { invalidateCache } from \"../../utils/database/invalidateCache\";\r\nimport { updateMemberRoles } from \"../../utils/hooks/events/applications/end/roles\";\r\nimport { generateBasePlaceholderContext } from \"../../utils/message/placeholders/generateBaseContext\";\r\nimport { resolveDiscordMessagePlaceholders } from \"../../utils/message/placeholders/resolvePlaceholders\";\r\nimport { onError } from \"../../utils/onError\";\r\n\r\nconst modal: ModalHandler = {\r\n  customId: \"rejApp\",\r\n  async execute(client, data, interaction) {\r\n    if (!interaction.guildId) return;\r\n    const reason = interaction.fields.getTextInputValue(\"reason\") || \"None\";\r\n    const [, applicationId, owner] = interaction.customId.split(\":\");\r\n\r\n    const application = await getCompletedApplication(applicationId, owner);\r\n    if (!application)\r\n      return interaction.reply(\r\n        (await onError(new Error(\"Application not found\"))).discordMsg\r\n      );\r\n\r\n    if (application.status !== \"Pending\")\r\n      return interaction.reply(\r\n        (await onError(new Error(\"Application already responded\"))).discordMsg\r\n      );\r\n\r\n    const server = await getServer(interaction.guildId);\r\n\r\n    await interaction.deferUpdate();\r\n    if (interaction.message!.hasThread)\r\n      interaction.message!.thread?.setArchived().catch(() => {});\r\n\r\n    await CompletedApplicationSchema.findOneAndUpdate(\r\n      { _id: applicationId },\r\n      { status: \"Rejected\", closedAt: new Date() }\r\n    );\r\n\r\n    const member = await getGuildMember(\r\n      client,\r\n      interaction.guildId,\r\n      application.owner\r\n    );\r\n    const applicationTrigger = await getServerApplication(\r\n      application.application,\r\n      interaction.guildId\r\n    );\r\n    if (member && applicationTrigger) {\r\n      await updateMemberRoles(\r\n        client,\r\n        member,\r\n        [\r\n          ...applicationTrigger.removeRolesWhenPending,\r\n          ...applicationTrigger.addRolesOnReject,\r\n        ],\r\n        [\r\n          ...applicationTrigger.addRolesWhenPending,\r\n          ...applicationTrigger.removeRolesOnReject,\r\n        ]\r\n      );\r\n    }\r\n\r\n    if (applicationTrigger) {\r\n      await invalidateCache(`completedApps:${applicationTrigger._id}:Pending`);\r\n      await invalidateCache(\r\n        `completedApps:${applicationTrigger._id}:${owner}:all`\r\n      );\r\n      let baseMessage: {\r\n        content?: string;\r\n        embeds?: any[];\r\n      } = {\r\n        embeds: [\r\n          {\r\n            color: parseInt(colours.error, 16),\r\n            description: t(\r\n              server.preferredLanguage,\r\n              \"APPLICATION_DEFAULT_MESSAGE_REJECTED\",\r\n              {\r\n                applicationName: applicationTrigger.name,\r\n                serverName: interaction.guild!.name,\r\n                reason: reason,\r\n                reviewer: `<@${interaction.user.id}>`,\r\n              }\r\n            ),\r\n          },\r\n        ],\r\n      };\r\n\r\n      const customMessage = applicationTrigger.acceptedMessage\r\n        ? await getServerMessage(\r\n            applicationTrigger.acceptedMessage,\r\n            applicationTrigger.server\r\n          )\r\n        : null;\r\n\r\n      if (customMessage) {\r\n        baseMessage = {\r\n          content: customMessage.content,\r\n          embeds: customMessage.embeds,\r\n        };\r\n      }\r\n      sendDirectMessage(\r\n        client,\r\n        owner,\r\n        resolveDiscordMessagePlaceholders(baseMessage, {\r\n          ...generateBasePlaceholderContext({\r\n            server: interaction.guild as Guild,\r\n          }),\r\n          applicationName: applicationTrigger.name,\r\n          reason: interaction.guild!.name,\r\n          reviewer: `<@${interaction.user.id}>`,\r\n        })\r\n      );\r\n    }\r\n\r\n    interaction\r\n      .message!.edit({\r\n        components: [],\r\n        content: t(\r\n          server.preferredLanguage,\r\n          \"APPLICATION_VERDICT_REJECT_HEADER\",\r\n          { user: `<@${interaction.user.id}>`, reason }\r\n        ),\r\n      })\r\n      .catch(() => {});\r\n\r\n    const logChannel = getAvailableLogChannel(\r\n      server.settings.logging,\r\n      \"applications.reject\"\r\n    );\r\n\r\n    if (!logChannel) return;\r\n\r\n    await postLogToWebhook(\r\n      client,\r\n      {\r\n        channel: logChannel.channel!,\r\n        enabled: logChannel.enabled,\r\n        webhook: logChannel.webhook!,\r\n      },\r\n      {\r\n        embeds: [\r\n          {\r\n            color: parseInt(colours.info, 16),\r\n            title: t(server.preferredLanguage, \"REJECT_APPLICATION_LOG_TITLE\"),\r\n            description: t(\r\n              server.preferredLanguage,\r\n              `REJECT_APPLICATION_LOG_BODY`,\r\n              {\r\n                user: `<@${owner}>`,\r\n                staff: `<@${interaction.user.id}>`,\r\n                reason,\r\n              }\r\n            ),\r\n          },\r\n        ],\r\n      }\r\n    );\r\n  },\r\n};\r\n\r\nexport default modal;\r\n"],"names":[],"mappings":"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","debug_id":"4ea7c441-6ff6-5ab6-a76f-0aefa09cc011"}