{"version":3,"file":"autoresponders.js","sources":["src/commands/interactions/slash/autoresponders.ts"],"sourceRoot":"/","sourcesContent":["import {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelType,\n  GuildMember,\n  InteractionContextType,\n  MessageFlags,\n  PermissionFlagsBits,\n  SlashCommandBuilder,\n} from \"discord.js\";\nimport { AppCommand } from \"../../../types/Command\";\nimport {\n  getServer,\n  getServerGroups,\n  getServerMessage,\n  getServerMessages,\n  getServerResponder,\n  getServerResponders,\n} from \"../../../utils/bot/getServer\";\nimport { t } from \"../../../lang\";\nimport { getUserPermissions } from \"../../../utils/calculateUserPermissions\";\nimport { onError } from \"../../../utils/onError\";\nimport { Locale } from \"../../../types/Locale\";\nimport limits from \"../../../constants/limits\";\nimport { generateId } from \"../../../utils/database/generateId\";\nimport {\n  generateExampleRegex,\n  validateUserRegex,\n} from \"../../../utils/formatters/validateRegex\";\nimport { updateCachedData } from \"../../../utils/database/updateCache\";\nimport { toTimeUnit } from \"../../../utils/formatters/toTimeUnit\";\nimport colours from \"../../../constants/colours\";\nimport { AutoResponderSchema } from \"../../../database/modals/AutoResponder\";\nimport { invalidateCache } from \"../../../utils/database/invalidateCache\";\nimport { InMemoryCache } from \"../../..\";\n\nconst cmd: AppCommand = {\n  type: \"slash\",\n  data: new SlashCommandBuilder()\n    .setName(\"autoresponders\")\n    .setDescription(\"Auto Responder configuration base\")\n    .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild)\n    .setContexts(InteractionContextType.Guild)\n    .addSubcommand((cmd) =>\n      cmd\n        .setName(\"view\")\n        .setDescription(\"View an auto responder\")\n        .addStringOption((opt) =>\n          opt\n            .setName(\"responder\")\n            .setDescription(\"Select an auto responder\")\n            .setAutocomplete(true)\n            .setRequired(true)\n        )\n    )\n    .addSubcommand((cmd) =>\n      cmd\n        .setName(\"allowed_channels\")\n        .setDescription(\n          \"Set the channels that auto responders are able to respond in\"\n        )\n    )\n    .addSubcommand((cmd) =>\n      cmd\n        .setName(\"new\")\n        .setDescription(\"Create an auto responder\")\n        .addStringOption((opt) =>\n          opt\n            .setName(\"name\")\n            .setDescription(\"Choose a name\")\n            .setMinLength(2)\n            .setMaxLength(100)\n            .setRequired(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"message\")\n            .setDescription(\"The new message of the tag\")\n            .setAutocomplete(true)\n            .setRequired(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"matcher_type\")\n            .setDescription(\"Choose a matcher type\")\n            .setRequired(true)\n            .setChoices([\n              {\n                name: \"Exact string\",\n                value: \"exact\",\n              },\n              {\n                name: \"Includes string\",\n                value: \"includes\",\n              },\n              {\n                name: \"Starts with string\",\n                value: \"starts\",\n              },\n              {\n                name: \"Ends with string\",\n                value: \"ends\",\n              },\n              {\n                name: \"Regex (Complex) matching\",\n                value: \"regex\",\n              },\n            ])\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"ignore_emojis_and_markdown\")\n            .setDescription(\"Select scope\")\n            .setChoices([\n              { name: \"Yes\", value: \"true\" },\n              { name: \"No\", value: \"false\" },\n            ])\n            .setRequired(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"process_as_lowercase\")\n            .setDescription(\"Select scope\")\n            .setChoices([\n              { name: \"Yes\", value: \"true\" },\n              { name: \"No\", value: \"false\" },\n            ])\n            .setRequired(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"matcher\")\n            .setDescription(\"The value for your matcher\")\n            .setMinLength(1)\n            .setMaxLength(300)\n            .setRequired(true)\n        )\n    )\n    .addSubcommand((cmd) =>\n      cmd\n        .setName(\"edit\")\n        .setDescription(\"Edit an auto responder\")\n        .addStringOption((opt) =>\n          opt\n            .setName(\"responder\")\n            .setDescription(\"Select an auto responder\")\n            .setAutocomplete(true)\n            .setRequired(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"name\")\n            .setDescription(\"Choose a name\")\n            .setMinLength(2)\n            .setMaxLength(100)\n            .setRequired(false)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"message\")\n            .setDescription(\"The new message of the tag\")\n            .setAutocomplete(true)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"matcher_type\")\n            .setDescription(\"Choose a matcher type\")\n            .setRequired(false)\n            .setChoices([\n              {\n                name: \"Exact string\",\n                value: \"exact\",\n              },\n              {\n                name: \"Includes string\",\n                value: \"includes\",\n              },\n              {\n                name: \"Starts with string\",\n                value: \"starts\",\n              },\n              {\n                name: \"Ends with string\",\n                value: \"ends\",\n              },\n              {\n                name: \"Regex (Complex) matching\",\n                value: \"regex\",\n              },\n            ])\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"ignore_emojis_and_markdown\")\n            .setDescription(\"Select scope\")\n            .setChoices([\n              { name: \"Yes\", value: \"true\" },\n              { name: \"No\", value: \"false\" },\n            ])\n            .setRequired(false)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"process_as_lowercase\")\n            .setDescription(\"Select scope\")\n            .setChoices([\n              { name: \"Yes\", value: \"true\" },\n              { name: \"No\", value: \"false\" },\n            ])\n            .setRequired(false)\n        )\n        .addStringOption((opt) =>\n          opt\n            .setName(\"matcher\")\n            .setDescription(\"The value for your matcher\")\n            .setMinLength(1)\n            .setMaxLength(300)\n            .setRequired(false)\n        )\n    )\n    .addSubcommand((cmd) =>\n      cmd\n        .setName(\"delete\")\n        .setDescription(\"Delete an auto responder\")\n        .addStringOption((opt) =>\n          opt\n            .setName(\"responder\")\n            .setDescription(\"Select an auto responder\")\n            .setAutocomplete(true)\n            .setRequired(true)\n        )\n    ),\n  async autocomplete(client, interaction) {\n    if (!interaction.guildId) return;\n    const focused = interaction.options.getFocused(true).name;\n    if (focused === \"responder\") {\n      const focusedValue = interaction.options.getString(\"responder\", true);\n      const responders = await getServerResponders(interaction.guildId);\n      if (!responders.length) {\n        interaction.respond([\n          {\n            name: \"You don't have any responders!\",\n            value: \"\",\n          },\n        ]);\n        return;\n      }\n\n      const filtered = responders.filter((m) =>\n        m.name.toLowerCase().includes(focusedValue.toLowerCase())\n      );\n\n      interaction.respond(\n        filtered\n          .map((m) => ({\n            name: m.name,\n            value: m._id,\n          }))\n          .slice(0, 25)\n      );\n    } else if (focused === \"message\") {\n      const focusedValue = interaction.options.getString(\"message\", true);\n      const message = await getServerMessages(interaction.guildId);\n      if (!message.length) {\n        interaction.respond([\n          {\n            name: \"You don't have any message!\",\n            value: \"\",\n          },\n        ]);\n        return;\n      }\n\n      const filtered = message.filter((m) =>\n        m.name.toLowerCase().includes(focusedValue.toLowerCase())\n      );\n\n      interaction.respond(\n        filtered\n          .map((m) => ({\n            name: m.name,\n            value: m._id,\n          }))\n          .slice(0, 25)\n      );\n    }\n  },\n  async execute(client, data, interaction) {\n    if (!interaction.guildId) return;\n    const subcommand = interaction.options.getSubcommand(true);\n    const lang = data.lang!;\n\n    await interaction.reply({\n      content: t(data.lang!, \"THINK\"),\n      flags: [MessageFlags.Ephemeral],\n    });\n\n    const groups = await getServerGroups(interaction.guildId);\n    const userPermissions = getUserPermissions(\n      interaction.member as GuildMember,\n      groups\n    );\n\n    if (subcommand === \"allowed_channels\") {\n      if (\n        !userPermissions.autoResponders.edit &&\n        !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Missing edit permission\"))).discordMsg\n        );\n\n      const server = await getServer(interaction.guildId);\n\n      interaction.editReply({\n        content: t(lang, \"SET_AUTO_RESPONDER_ALLOWED_CHANNELS\"),\n        components: [\n          new ActionRowBuilder<ChannelSelectMenuBuilder>()\n            .addComponents(\n              new ChannelSelectMenuBuilder()\n                .addChannelTypes(\n                  ChannelType.PrivateThread,\n                  ChannelType.AnnouncementThread,\n                  ChannelType.GuildAnnouncement,\n                  ChannelType.GuildText,\n                  ChannelType.PublicThread\n                )\n                .setCustomId(\"autoResponderChannels\")\n                .setDefaultChannels(\n                  server.settings.autoResponders?.extraAllowedChannels || []\n                )\n                .setPlaceholder(\"Select channels\")\n                .setMaxValues(limits.free.autoResponders.extraChannels)\n            )\n            .toJSON(),\n        ],\n      });\n    } else if (subcommand === \"new\") {\n      if (\n        !userPermissions.autoResponders.create &&\n        !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Missing create permission\"))).discordMsg\n        );\n\n      const responders = await getServerResponders(interaction.guildId);\n      if (responders.length >= limits.free.autoResponders.amount)\n        return interaction.editReply(\n          (await onError(new Error(\"Auto responder limit reached\"))).discordMsg\n        );\n\n      const id = generateId(\"AR\");\n      const name = interaction.options.getString(\"name\", true);\n      const messageId = interaction.options.getString(\"message\", true);\n      const scope = {\n        clean:\n          interaction.options.getString(\"ignore_emojis_and_markdown\", true) ===\n          \"true\",\n        normalized:\n          interaction.options.getString(\"process_as_lowercase\", true) ===\n          \"true\",\n      };\n      const matcherType = interaction.options.getString(\"matcher_type\", true);\n      const matcher = interaction.options.getString(\"matcher\", true);\n      const message = await getServerMessage(messageId, interaction.guildId);\n\n      if (!message)\n        return interaction.editReply(\n          (await onError(new Error(\"Message not found\"))).discordMsg\n        );\n\n      if (matcherType === \"regex\") {\n        const validRegex = validateUserRegex(matcher);\n        if (!validRegex.valid)\n          return interaction.editReply(\n            (await onError(new Error(\"Invalid regex\"))).discordMsg\n          );\n      }\n\n      const responder = await AutoResponderSchema.create({\n        _id: id,\n        name: name,\n        server: interaction.guildId,\n        message: messageId,\n        matcher: matcher,\n        matcherScope: scope,\n        matcherType: matcherType,\n      });\n\n      interaction.editReply({\n        content: t(lang, \"RESPONDER_CREATED\"),\n      });\n      await invalidateCache(`responders:${interaction.guildId}`);\n      updateCachedData(\n        `responder:${id}`,\n        toTimeUnit(\"seconds\", 0, 10),\n        responder.toObject()\n      );\n      // This just loads the updated responders back into cache\n      getServerResponders(interaction.guildId);\n    } else if (subcommand === \"view\") {\n      if (\n        (!userPermissions.autoResponders.create ||\n          !userPermissions.autoResponders.edit ||\n          !userPermissions.autoResponders.delete) &&\n        !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Missing view permission\"))).discordMsg\n        );\n      const responderId = interaction.options.getString(\"responder\", true);\n      const responder = await getServerResponder(\n        responderId,\n        interaction.guildId\n      );\n      if (!responder)\n        return interaction.editReply(\n          (await onError(new Error(\"Responder not found\"))).discordMsg\n        );\n\n      interaction.editReply({\n        embeds: [\n          {\n            color: parseInt(colours.info, 16),\n            title: t(lang, \"RESPONDER_INFO_TITLE\"),\n            fields: [\n              {\n                name: t(lang, \"MATCHER_TYPE\"),\n                inline: true,\n                value: t(\n                  lang,\n                  `MATCHER_TYPE_${responder.matcherType.toUpperCase()}`\n                ),\n              },\n              {\n                name: t(lang, \"MATCHER_SCOPES\"),\n                inline: true,\n                value: `${t(lang, `MATCHER_SCOPES_CLEAN`)}${t(\n                  lang,\n                  responder.matcherScope.clean ? \"YES\" : \"NO\"\n                )}\\n${t(lang, `MATCHER_SCOPES_NORMALIZE`)}${t(\n                  lang,\n                  responder.matcherScope.normalize ? \"YES\" : \"NO\"\n                )}`,\n              },\n              {\n                name: t(lang, \"MATCHER\"),\n                value: `\\`${responder.matcher}\\``,\n              },\n              {\n                name: t(lang, \"MATCHER_MATCH_EXAMPLE\"),\n                value: `\\`${generateExampleRegex(responder.matcher)}\\``,\n              },\n            ],\n          },\n        ],\n      });\n    } else if (subcommand === \"edit\") {\n      if (\n        !userPermissions.autoResponders.edit &&\n        !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Missing edit permission\"))).discordMsg\n        );\n      const responderId = interaction.options.getString(\"responder\", true);\n      const name = interaction.options.getString(\"name\");\n      const messageId = interaction.options.getString(\"message\");\n      const cleanScope = interaction.options.getString(\n        \"ignore_emojis_and_markdown\"\n      );\n      const normalizedScope = interaction.options.getString(\n        \"process_as_lowercase\"\n      );\n      const matcherType = interaction.options.getString(\"matcher_type\");\n      const matcher = interaction.options.getString(\"matcher\");\n      if (\n        !name &&\n        !messageId &&\n        !matcherType &&\n        !matcher &&\n        !cleanScope &&\n        !normalizedScope\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Invalid usage\"))).discordMsg\n        );\n\n      const responder = await getServerResponder(\n        responderId,\n        interaction.guildId\n      );\n      if (!responder)\n        return interaction.editReply(\n          (await onError(new Error(\"Responder not found\"))).discordMsg\n        );\n\n      if (matcherType === \"regex\") {\n        const validRegex = validateUserRegex(matcher || responder.matcher);\n        if (!validRegex.valid)\n          return interaction.editReply(\n            (await onError(new Error(\"Invalid regex\"))).discordMsg\n          );\n      }\n\n      const message = await getServerMessage(\n        messageId || responder.message,\n        interaction.guildId\n      );\n      if (!message)\n        return interaction.editReply(\n          (await onError(new Error(\"Message not found\"))).discordMsg\n        );\n\n      interaction.editReply({\n        content: t(lang, \"RESPONDER_UPDATED\"),\n      });\n      await AutoResponderSchema.findOneAndUpdate(\n        {\n          _id: responderId,\n        },\n        {\n          name: interaction.options.getString(\"name\") || responder.name,\n          message: message._id,\n          matcherScope: {\n            clean: cleanScope || responder.matcherScope.clean,\n            normalize: normalizedScope || responder.matcherScope.normalize,\n          },\n          matcher: matcher || responder.matcher,\n          matcherType: matcherType || responder.matcherType,\n        }\n      );\n\n      await invalidateCache(`responders:${interaction.guildId}`);\n      await invalidateCache(`responder:${responderId}`);\n      InMemoryCache.invalidate(`responders:${interaction.guildId}`);\n    } else if (subcommand === \"delete\") {\n      if (\n        !userPermissions.autoResponders.delete &&\n        !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n      )\n        return interaction.editReply(\n          (await onError(new Error(\"Missing delete permission\"))).discordMsg\n        );\n      const responderId = interaction.options.getString(\"responder\", true);\n      const responder = await getServerResponder(\n        responderId,\n        interaction.guildId\n      );\n      if (!responder)\n        return interaction.editReply(\n          (await onError(new Error(\"Responder not found\"))).discordMsg\n        );\n\n      await AutoResponderSchema.findOneAndDelete({ _id: responderId });\n      await invalidateCache(`responders:${interaction.guildId}`);\n      await invalidateCache(`responder:${responderId}`);\n      InMemoryCache.invalidate(`responders:${interaction.guildId}`);\n\n      interaction.editReply({\n        content: t(lang, \"RESPONDER_DELETED\"),\n      });\n    }\n  },\n};\n\nexport default cmd;\n"],"names":[],"mappings":"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","debug_id":"0957bdc8-f539-541d-8cad-2a525bce0c05"}