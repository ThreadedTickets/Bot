{"version":3,"file":"transcript.js","sources":["src/commands/interactions/slash/transcript.ts"],"sourceRoot":"/","sourcesContent":["import {\n  GuildMember,\n  InteractionContextType,\n  MessageFlags,\n  PermissionFlagsBits,\n  SlashCommandBuilder,\n} from \"discord.js\";\nimport { AppCommand } from \"../../../types/Command\";\nimport { t } from \"../../../lang\";\nimport {\n  getServerGroupsByIds,\n  getTicket,\n  getTickets,\n} from \"../../../utils/bot/getServer\";\nimport { onError } from \"../../../utils/onError\";\nimport { getUserPermissions } from \"../../../utils/calculateUserPermissions\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { formatDate } from \"../../../utils/formatters/date\";\n\nconst command: AppCommand = {\n  type: \"slash\",\n  data: new SlashCommandBuilder()\n    .setName(\"transcript\")\n    .setDescription(\"Get a ticket transcript\")\n    .setContexts(InteractionContextType.Guild)\n    .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages)\n    .setNameLocalizations({})\n    .setDescriptionLocalizations({})\n    .addStringOption((opt) =>\n      opt\n        .setName(\"ticket\")\n        .setDescription(\"The ticket to view the transcript of\")\n        .setRequired(true)\n        .setAutocomplete(true)\n    ),\n\n  async autocomplete(client, interaction) {\n    if (!interaction.guildId) return;\n    const focused = interaction.options.getFocused(true).name;\n\n    if (focused === \"ticket\") {\n      const focusedValue = interaction.options.getString(\"ticket\", true);\n      const tickets = await getTickets(interaction.guildId, [\"Closed\"]);\n      if (!tickets.length) {\n        interaction.respond([\n          {\n            name: \"There are no closed tickets\",\n            value: \"\",\n          },\n        ]);\n        return;\n      }\n\n      const filtered = tickets.filter(\n        (m) =>\n          m._id.toLowerCase().includes(focusedValue.toLowerCase()) ||\n          m.owner.includes(focusedValue.toLowerCase())\n      );\n\n      interaction.respond(\n        filtered\n          .map((m) => ({\n            name: `[${formatDate(m.createdAt, \"DD/MM/YY\")}] [${m.owner}] ${\n              m._id\n            }`.slice(0, 100),\n            value: m._id,\n          }))\n          .slice(0, 25)\n      );\n    }\n  },\n\n  async execute(client, data, interaction) {\n    if (!interaction.guildId) return;\n    const ticketId = interaction.options.getString(\"ticket\", true);\n    if (!ticketId)\n      return interaction.reply(\n        (\n          await onError(new Error(\"Transcript not found\"), {\n            ticketId: ticketId,\n          })\n        ).discordMsg\n      );\n    const ticket = await getTicket(ticketId, interaction.guildId);\n    if (!ticket)\n      return interaction.reply(\n        (\n          await onError(new Error(\"Transcript not found\"), {\n            ticketId: ticketId,\n          })\n        ).discordMsg\n      );\n    const userPermissions = getUserPermissions(\n      interaction.member as GuildMember,\n      await getServerGroupsByIds(ticket.groups, interaction.guildId)\n    );\n\n    if (\n      ((ticket.isRaised && !userPermissions.tickets.canViewLockedTranscripts) ||\n        (!ticket.isRaised && !userPermissions.tickets.canViewTranscripts)) &&\n      !interaction.memberPermissions?.has(PermissionFlagsBits.ManageGuild)\n    )\n      return interaction.reply(\n        (\n          await onError(new Error(\"Missing view permission\"), {\n            ticketId: ticketId,\n          })\n        ).discordMsg\n      );\n\n    await interaction.reply({\n      content: t(data.lang!, \"THINK\"),\n      flags: [MessageFlags.Ephemeral],\n    });\n\n    const transcriptPath = path.join(\n      process.cwd(),\n      \"transcripts\",\n      `${ticket.isRaised ? \"LOCKED_\" : \"\"}${ticketId}.html`\n    );\n    if (!fs.existsSync(transcriptPath))\n      return interaction.editReply(\n        (\n          await onError(new Error(\"Transcript not found\"), {\n            ticketId: ticketId,\n            path: transcriptPath,\n          })\n        ).discordMsg\n      );\n\n    interaction\n      .editReply({\n        content: \"\",\n        files: [transcriptPath],\n      })\n      .catch(async (err) => {\n        interaction.editReply(\n          (\n            await onError(err, {\n              ticketId: ticketId,\n              path: transcriptPath,\n            })\n          ).discordMsg\n        );\n      });\n  },\n};\n\nexport default command;\n"],"names":[],"mappings":"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","debug_id":"3ff0aa9c-3125-5cce-8673-6ecd55fdcc6f"}