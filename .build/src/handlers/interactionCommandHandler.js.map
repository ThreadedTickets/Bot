{"version":3,"file":"interactionCommandHandler.js","sources":["src/handlers/interactionCommandHandler.ts"],"sourceRoot":"/","sourcesContent":["import { REST, Routes, ApplicationCommandData } from \"discord.js\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { AppCommand } from \"../types/Command\";\r\nimport { CommandCache } from \"../types/CommandCache\";\r\nimport { loadFilesRecursively } from \"../utils/commands/load\";\r\nimport \"@dotenvx/dotenvx\";\r\nimport logger from \"../utils/logger\";\r\n\r\nconst rest = new REST().setToken(process.env.DISCORD_TOKEN!);\r\nconst clientId = process.env.DISCORD_CLIENT_ID!;\r\nconst testGuildId = process.env.DISCORD_TEST_GUILD!;\r\nconst CACHE_PATH = path.join(__dirname, \"../../.commandCache.json\");\r\n\r\nexport const appCommands = new Map<string, AppCommand>();\r\n\r\n// Load previous command cache\r\nconst loadCache = (): CommandCache => {\r\n  if (fs.existsSync(CACHE_PATH)) {\r\n    return JSON.parse(fs.readFileSync(CACHE_PATH, \"utf8\"));\r\n  }\r\n  return {};\r\n};\r\n\r\n// Save command cache\r\nconst saveCache = (cache: CommandCache) => {\r\n  fs.writeFileSync(CACHE_PATH, JSON.stringify(cache, null, 2));\r\n};\r\n\r\n// Reload the commands and check if the files have changed\r\nexport const deployAppCommands = async () => {\r\n  const cache = loadCache();\r\n  const newCache: CommandCache = {};\r\n  const files = loadFilesRecursively(\r\n    path.join(__dirname, \"../commands/interactions\")\r\n  );\r\n\r\n  const globalToRegister: ApplicationCommandData[] = [];\r\n  const guildToRegister: ApplicationCommandData[] = [];\r\n\r\n  for (const file of files) {\r\n    const command: AppCommand = (await import(file)).default;\r\n\r\n    const stats = fs.statSync(file);\r\n    const mtime = stats.mtimeMs;\r\n    const isGuild = command.testGuild ?? false;\r\n    const cached = cache[command.data.name];\r\n\r\n    appCommands.set(command.data.name, command);\r\n    newCache[command.data.name] = { mtime, isGuild };\r\n\r\n    // Check if the command has been modified based on timestamp or any other changes\r\n    const hasChanged =\r\n      !cached || cached.mtime !== mtime || cached.isGuild !== isGuild;\r\n\r\n    if (hasChanged) {\r\n      if (isGuild) {\r\n        guildToRegister.push(command.data.toJSON() as ApplicationCommandData);\r\n      } else {\r\n        globalToRegister.push(command.data.toJSON() as ApplicationCommandData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Only update if there are changes\r\n  if (guildToRegister.length > 0) {\r\n    await rest.put(Routes.applicationGuildCommands(clientId, testGuildId), {\r\n      body: guildToRegister,\r\n    });\r\n    logger.info(`Updated ${guildToRegister.length} guild commands`);\r\n  }\r\n\r\n  if (globalToRegister.length > 0) {\r\n    await rest.put(Routes.applicationCommands(clientId), {\r\n      body: globalToRegister,\r\n    });\r\n    logger.info(`Updated ${globalToRegister.length} global commands`);\r\n  }\r\n\r\n  saveCache(newCache);\r\n};\r\n\r\n// Function to reload commands, clearing the current ones in memory\r\nexport const reloadAppCommands = async () => {\r\n  appCommands.clear();\r\n  logger.info(\"Cleared existing commands from memory\");\r\n\r\n  await deployAppCommands();\r\n  logger.info(\"Re-deployed commands\");\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"45d231f7-d76f-569f-92f9-ceea0b14eaa2"}